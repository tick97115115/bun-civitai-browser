
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `BaseModel` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model BaseModel
 * 
 */
export type BaseModelModel = runtime.Types.Result.DefaultSelection<Prisma.$BaseModelPayload>

export type AggregateBaseModel = {
  _count: BaseModelCountAggregateOutputType | null
  _avg: BaseModelAvgAggregateOutputType | null
  _sum: BaseModelSumAggregateOutputType | null
  _min: BaseModelMinAggregateOutputType | null
  _max: BaseModelMaxAggregateOutputType | null
}

export type BaseModelAvgAggregateOutputType = {
  id: number | null
}

export type BaseModelSumAggregateOutputType = {
  id: number | null
}

export type BaseModelMinAggregateOutputType = {
  id: number | null
  name: string | null
}

export type BaseModelMaxAggregateOutputType = {
  id: number | null
  name: string | null
}

export type BaseModelCountAggregateOutputType = {
  id: number
  name: number
  _all: number
}


export type BaseModelAvgAggregateInputType = {
  id?: true
}

export type BaseModelSumAggregateInputType = {
  id?: true
}

export type BaseModelMinAggregateInputType = {
  id?: true
  name?: true
}

export type BaseModelMaxAggregateInputType = {
  id?: true
  name?: true
}

export type BaseModelCountAggregateInputType = {
  id?: true
  name?: true
  _all?: true
}

export type BaseModelAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BaseModel to aggregate.
   */
  where?: Prisma.BaseModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BaseModels to fetch.
   */
  orderBy?: Prisma.BaseModelOrderByWithRelationInput | Prisma.BaseModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BaseModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BaseModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BaseModels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned BaseModels
  **/
  _count?: true | BaseModelCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BaseModelAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BaseModelSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BaseModelMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BaseModelMaxAggregateInputType
}

export type GetBaseModelAggregateType<T extends BaseModelAggregateArgs> = {
      [P in keyof T & keyof AggregateBaseModel]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBaseModel[P]>
    : Prisma.GetScalarType<T[P], AggregateBaseModel[P]>
}




export type BaseModelGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BaseModelWhereInput
  orderBy?: Prisma.BaseModelOrderByWithAggregationInput | Prisma.BaseModelOrderByWithAggregationInput[]
  by: Prisma.BaseModelScalarFieldEnum[] | Prisma.BaseModelScalarFieldEnum
  having?: Prisma.BaseModelScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BaseModelCountAggregateInputType | true
  _avg?: BaseModelAvgAggregateInputType
  _sum?: BaseModelSumAggregateInputType
  _min?: BaseModelMinAggregateInputType
  _max?: BaseModelMaxAggregateInputType
}

export type BaseModelGroupByOutputType = {
  id: number
  name: string
  _count: BaseModelCountAggregateOutputType | null
  _avg: BaseModelAvgAggregateOutputType | null
  _sum: BaseModelSumAggregateOutputType | null
  _min: BaseModelMinAggregateOutputType | null
  _max: BaseModelMaxAggregateOutputType | null
}

type GetBaseModelGroupByPayload<T extends BaseModelGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BaseModelGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BaseModelGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BaseModelGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BaseModelGroupByOutputType[P]>
      }
    >
  >



export type BaseModelWhereInput = {
  AND?: Prisma.BaseModelWhereInput | Prisma.BaseModelWhereInput[]
  OR?: Prisma.BaseModelWhereInput[]
  NOT?: Prisma.BaseModelWhereInput | Prisma.BaseModelWhereInput[]
  id?: Prisma.IntFilter<"BaseModel"> | number
  name?: Prisma.StringFilter<"BaseModel"> | string
  modelVersions?: Prisma.ModelVersionListRelationFilter
  baseModelTypes?: Prisma.BaseModelTypeListRelationFilter
}

export type BaseModelOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  modelVersions?: Prisma.ModelVersionOrderByRelationAggregateInput
  baseModelTypes?: Prisma.BaseModelTypeOrderByRelationAggregateInput
}

export type BaseModelWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.BaseModelWhereInput | Prisma.BaseModelWhereInput[]
  OR?: Prisma.BaseModelWhereInput[]
  NOT?: Prisma.BaseModelWhereInput | Prisma.BaseModelWhereInput[]
  modelVersions?: Prisma.ModelVersionListRelationFilter
  baseModelTypes?: Prisma.BaseModelTypeListRelationFilter
}, "id" | "name">

export type BaseModelOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  _count?: Prisma.BaseModelCountOrderByAggregateInput
  _avg?: Prisma.BaseModelAvgOrderByAggregateInput
  _max?: Prisma.BaseModelMaxOrderByAggregateInput
  _min?: Prisma.BaseModelMinOrderByAggregateInput
  _sum?: Prisma.BaseModelSumOrderByAggregateInput
}

export type BaseModelScalarWhereWithAggregatesInput = {
  AND?: Prisma.BaseModelScalarWhereWithAggregatesInput | Prisma.BaseModelScalarWhereWithAggregatesInput[]
  OR?: Prisma.BaseModelScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BaseModelScalarWhereWithAggregatesInput | Prisma.BaseModelScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"BaseModel"> | number
  name?: Prisma.StringWithAggregatesFilter<"BaseModel"> | string
}

export type BaseModelCreateInput = {
  name: string
  modelVersions?: Prisma.ModelVersionCreateNestedManyWithoutBaseModelInput
  baseModelTypes?: Prisma.BaseModelTypeCreateNestedManyWithoutBaseModelInput
}

export type BaseModelUncheckedCreateInput = {
  id?: number
  name: string
  modelVersions?: Prisma.ModelVersionUncheckedCreateNestedManyWithoutBaseModelInput
  baseModelTypes?: Prisma.BaseModelTypeUncheckedCreateNestedManyWithoutBaseModelInput
}

export type BaseModelUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  modelVersions?: Prisma.ModelVersionUpdateManyWithoutBaseModelNestedInput
  baseModelTypes?: Prisma.BaseModelTypeUpdateManyWithoutBaseModelNestedInput
}

export type BaseModelUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  modelVersions?: Prisma.ModelVersionUncheckedUpdateManyWithoutBaseModelNestedInput
  baseModelTypes?: Prisma.BaseModelTypeUncheckedUpdateManyWithoutBaseModelNestedInput
}

export type BaseModelCreateManyInput = {
  id?: number
  name: string
}

export type BaseModelUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type BaseModelUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type BaseModelCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type BaseModelAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type BaseModelMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type BaseModelMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type BaseModelSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type BaseModelScalarRelationFilter = {
  is?: Prisma.BaseModelWhereInput
  isNot?: Prisma.BaseModelWhereInput
}

export type BaseModelCreateNestedOneWithoutBaseModelTypesInput = {
  create?: Prisma.XOR<Prisma.BaseModelCreateWithoutBaseModelTypesInput, Prisma.BaseModelUncheckedCreateWithoutBaseModelTypesInput>
  connectOrCreate?: Prisma.BaseModelCreateOrConnectWithoutBaseModelTypesInput
  connect?: Prisma.BaseModelWhereUniqueInput
}

export type BaseModelUpdateOneRequiredWithoutBaseModelTypesNestedInput = {
  create?: Prisma.XOR<Prisma.BaseModelCreateWithoutBaseModelTypesInput, Prisma.BaseModelUncheckedCreateWithoutBaseModelTypesInput>
  connectOrCreate?: Prisma.BaseModelCreateOrConnectWithoutBaseModelTypesInput
  upsert?: Prisma.BaseModelUpsertWithoutBaseModelTypesInput
  connect?: Prisma.BaseModelWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.BaseModelUpdateToOneWithWhereWithoutBaseModelTypesInput, Prisma.BaseModelUpdateWithoutBaseModelTypesInput>, Prisma.BaseModelUncheckedUpdateWithoutBaseModelTypesInput>
}

export type BaseModelCreateNestedOneWithoutModelVersionsInput = {
  create?: Prisma.XOR<Prisma.BaseModelCreateWithoutModelVersionsInput, Prisma.BaseModelUncheckedCreateWithoutModelVersionsInput>
  connectOrCreate?: Prisma.BaseModelCreateOrConnectWithoutModelVersionsInput
  connect?: Prisma.BaseModelWhereUniqueInput
}

export type BaseModelUpdateOneRequiredWithoutModelVersionsNestedInput = {
  create?: Prisma.XOR<Prisma.BaseModelCreateWithoutModelVersionsInput, Prisma.BaseModelUncheckedCreateWithoutModelVersionsInput>
  connectOrCreate?: Prisma.BaseModelCreateOrConnectWithoutModelVersionsInput
  upsert?: Prisma.BaseModelUpsertWithoutModelVersionsInput
  connect?: Prisma.BaseModelWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.BaseModelUpdateToOneWithWhereWithoutModelVersionsInput, Prisma.BaseModelUpdateWithoutModelVersionsInput>, Prisma.BaseModelUncheckedUpdateWithoutModelVersionsInput>
}

export type BaseModelCreateWithoutBaseModelTypesInput = {
  name: string
  modelVersions?: Prisma.ModelVersionCreateNestedManyWithoutBaseModelInput
}

export type BaseModelUncheckedCreateWithoutBaseModelTypesInput = {
  id?: number
  name: string
  modelVersions?: Prisma.ModelVersionUncheckedCreateNestedManyWithoutBaseModelInput
}

export type BaseModelCreateOrConnectWithoutBaseModelTypesInput = {
  where: Prisma.BaseModelWhereUniqueInput
  create: Prisma.XOR<Prisma.BaseModelCreateWithoutBaseModelTypesInput, Prisma.BaseModelUncheckedCreateWithoutBaseModelTypesInput>
}

export type BaseModelUpsertWithoutBaseModelTypesInput = {
  update: Prisma.XOR<Prisma.BaseModelUpdateWithoutBaseModelTypesInput, Prisma.BaseModelUncheckedUpdateWithoutBaseModelTypesInput>
  create: Prisma.XOR<Prisma.BaseModelCreateWithoutBaseModelTypesInput, Prisma.BaseModelUncheckedCreateWithoutBaseModelTypesInput>
  where?: Prisma.BaseModelWhereInput
}

export type BaseModelUpdateToOneWithWhereWithoutBaseModelTypesInput = {
  where?: Prisma.BaseModelWhereInput
  data: Prisma.XOR<Prisma.BaseModelUpdateWithoutBaseModelTypesInput, Prisma.BaseModelUncheckedUpdateWithoutBaseModelTypesInput>
}

export type BaseModelUpdateWithoutBaseModelTypesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  modelVersions?: Prisma.ModelVersionUpdateManyWithoutBaseModelNestedInput
}

export type BaseModelUncheckedUpdateWithoutBaseModelTypesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  modelVersions?: Prisma.ModelVersionUncheckedUpdateManyWithoutBaseModelNestedInput
}

export type BaseModelCreateWithoutModelVersionsInput = {
  name: string
  baseModelTypes?: Prisma.BaseModelTypeCreateNestedManyWithoutBaseModelInput
}

export type BaseModelUncheckedCreateWithoutModelVersionsInput = {
  id?: number
  name: string
  baseModelTypes?: Prisma.BaseModelTypeUncheckedCreateNestedManyWithoutBaseModelInput
}

export type BaseModelCreateOrConnectWithoutModelVersionsInput = {
  where: Prisma.BaseModelWhereUniqueInput
  create: Prisma.XOR<Prisma.BaseModelCreateWithoutModelVersionsInput, Prisma.BaseModelUncheckedCreateWithoutModelVersionsInput>
}

export type BaseModelUpsertWithoutModelVersionsInput = {
  update: Prisma.XOR<Prisma.BaseModelUpdateWithoutModelVersionsInput, Prisma.BaseModelUncheckedUpdateWithoutModelVersionsInput>
  create: Prisma.XOR<Prisma.BaseModelCreateWithoutModelVersionsInput, Prisma.BaseModelUncheckedCreateWithoutModelVersionsInput>
  where?: Prisma.BaseModelWhereInput
}

export type BaseModelUpdateToOneWithWhereWithoutModelVersionsInput = {
  where?: Prisma.BaseModelWhereInput
  data: Prisma.XOR<Prisma.BaseModelUpdateWithoutModelVersionsInput, Prisma.BaseModelUncheckedUpdateWithoutModelVersionsInput>
}

export type BaseModelUpdateWithoutModelVersionsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  baseModelTypes?: Prisma.BaseModelTypeUpdateManyWithoutBaseModelNestedInput
}

export type BaseModelUncheckedUpdateWithoutModelVersionsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  baseModelTypes?: Prisma.BaseModelTypeUncheckedUpdateManyWithoutBaseModelNestedInput
}


/**
 * Count Type BaseModelCountOutputType
 */

export type BaseModelCountOutputType = {
  modelVersions: number
  baseModelTypes: number
}

export type BaseModelCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  modelVersions?: boolean | BaseModelCountOutputTypeCountModelVersionsArgs
  baseModelTypes?: boolean | BaseModelCountOutputTypeCountBaseModelTypesArgs
}

/**
 * BaseModelCountOutputType without action
 */
export type BaseModelCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModelCountOutputType
   */
  select?: Prisma.BaseModelCountOutputTypeSelect<ExtArgs> | null
}

/**
 * BaseModelCountOutputType without action
 */
export type BaseModelCountOutputTypeCountModelVersionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ModelVersionWhereInput
}

/**
 * BaseModelCountOutputType without action
 */
export type BaseModelCountOutputTypeCountBaseModelTypesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BaseModelTypeWhereInput
}


export type BaseModelSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  modelVersions?: boolean | Prisma.BaseModel$modelVersionsArgs<ExtArgs>
  baseModelTypes?: boolean | Prisma.BaseModel$baseModelTypesArgs<ExtArgs>
  _count?: boolean | Prisma.BaseModelCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["baseModel"]>

export type BaseModelSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["baseModel"]>

export type BaseModelSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["baseModel"]>

export type BaseModelSelectScalar = {
  id?: boolean
  name?: boolean
}

export type BaseModelOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name", ExtArgs["result"]["baseModel"]>
export type BaseModelInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  modelVersions?: boolean | Prisma.BaseModel$modelVersionsArgs<ExtArgs>
  baseModelTypes?: boolean | Prisma.BaseModel$baseModelTypesArgs<ExtArgs>
  _count?: boolean | Prisma.BaseModelCountOutputTypeDefaultArgs<ExtArgs>
}
export type BaseModelIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type BaseModelIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $BaseModelPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "BaseModel"
  objects: {
    modelVersions: Prisma.$ModelVersionPayload<ExtArgs>[]
    baseModelTypes: Prisma.$BaseModelTypePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
  }, ExtArgs["result"]["baseModel"]>
  composites: {}
}

export type BaseModelGetPayload<S extends boolean | null | undefined | BaseModelDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BaseModelPayload, S>

export type BaseModelCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BaseModelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BaseModelCountAggregateInputType | true
  }

export interface BaseModelDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BaseModel'], meta: { name: 'BaseModel' } }
  /**
   * Find zero or one BaseModel that matches the filter.
   * @param {BaseModelFindUniqueArgs} args - Arguments to find a BaseModel
   * @example
   * // Get one BaseModel
   * const baseModel = await prisma.baseModel.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BaseModelFindUniqueArgs>(args: Prisma.SelectSubset<T, BaseModelFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BaseModelClient<runtime.Types.Result.GetResult<Prisma.$BaseModelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one BaseModel that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BaseModelFindUniqueOrThrowArgs} args - Arguments to find a BaseModel
   * @example
   * // Get one BaseModel
   * const baseModel = await prisma.baseModel.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BaseModelFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BaseModelFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BaseModelClient<runtime.Types.Result.GetResult<Prisma.$BaseModelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BaseModel that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseModelFindFirstArgs} args - Arguments to find a BaseModel
   * @example
   * // Get one BaseModel
   * const baseModel = await prisma.baseModel.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BaseModelFindFirstArgs>(args?: Prisma.SelectSubset<T, BaseModelFindFirstArgs<ExtArgs>>): Prisma.Prisma__BaseModelClient<runtime.Types.Result.GetResult<Prisma.$BaseModelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BaseModel that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseModelFindFirstOrThrowArgs} args - Arguments to find a BaseModel
   * @example
   * // Get one BaseModel
   * const baseModel = await prisma.baseModel.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BaseModelFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BaseModelFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BaseModelClient<runtime.Types.Result.GetResult<Prisma.$BaseModelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more BaseModels that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseModelFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BaseModels
   * const baseModels = await prisma.baseModel.findMany()
   * 
   * // Get first 10 BaseModels
   * const baseModels = await prisma.baseModel.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const baseModelWithIdOnly = await prisma.baseModel.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BaseModelFindManyArgs>(args?: Prisma.SelectSubset<T, BaseModelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BaseModelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a BaseModel.
   * @param {BaseModelCreateArgs} args - Arguments to create a BaseModel.
   * @example
   * // Create one BaseModel
   * const BaseModel = await prisma.baseModel.create({
   *   data: {
   *     // ... data to create a BaseModel
   *   }
   * })
   * 
   */
  create<T extends BaseModelCreateArgs>(args: Prisma.SelectSubset<T, BaseModelCreateArgs<ExtArgs>>): Prisma.Prisma__BaseModelClient<runtime.Types.Result.GetResult<Prisma.$BaseModelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many BaseModels.
   * @param {BaseModelCreateManyArgs} args - Arguments to create many BaseModels.
   * @example
   * // Create many BaseModels
   * const baseModel = await prisma.baseModel.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BaseModelCreateManyArgs>(args?: Prisma.SelectSubset<T, BaseModelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many BaseModels and returns the data saved in the database.
   * @param {BaseModelCreateManyAndReturnArgs} args - Arguments to create many BaseModels.
   * @example
   * // Create many BaseModels
   * const baseModel = await prisma.baseModel.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many BaseModels and only return the `id`
   * const baseModelWithIdOnly = await prisma.baseModel.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BaseModelCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BaseModelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BaseModelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a BaseModel.
   * @param {BaseModelDeleteArgs} args - Arguments to delete one BaseModel.
   * @example
   * // Delete one BaseModel
   * const BaseModel = await prisma.baseModel.delete({
   *   where: {
   *     // ... filter to delete one BaseModel
   *   }
   * })
   * 
   */
  delete<T extends BaseModelDeleteArgs>(args: Prisma.SelectSubset<T, BaseModelDeleteArgs<ExtArgs>>): Prisma.Prisma__BaseModelClient<runtime.Types.Result.GetResult<Prisma.$BaseModelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one BaseModel.
   * @param {BaseModelUpdateArgs} args - Arguments to update one BaseModel.
   * @example
   * // Update one BaseModel
   * const baseModel = await prisma.baseModel.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BaseModelUpdateArgs>(args: Prisma.SelectSubset<T, BaseModelUpdateArgs<ExtArgs>>): Prisma.Prisma__BaseModelClient<runtime.Types.Result.GetResult<Prisma.$BaseModelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more BaseModels.
   * @param {BaseModelDeleteManyArgs} args - Arguments to filter BaseModels to delete.
   * @example
   * // Delete a few BaseModels
   * const { count } = await prisma.baseModel.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BaseModelDeleteManyArgs>(args?: Prisma.SelectSubset<T, BaseModelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BaseModels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseModelUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BaseModels
   * const baseModel = await prisma.baseModel.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BaseModelUpdateManyArgs>(args: Prisma.SelectSubset<T, BaseModelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BaseModels and returns the data updated in the database.
   * @param {BaseModelUpdateManyAndReturnArgs} args - Arguments to update many BaseModels.
   * @example
   * // Update many BaseModels
   * const baseModel = await prisma.baseModel.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more BaseModels and only return the `id`
   * const baseModelWithIdOnly = await prisma.baseModel.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BaseModelUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BaseModelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BaseModelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one BaseModel.
   * @param {BaseModelUpsertArgs} args - Arguments to update or create a BaseModel.
   * @example
   * // Update or create a BaseModel
   * const baseModel = await prisma.baseModel.upsert({
   *   create: {
   *     // ... data to create a BaseModel
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BaseModel we want to update
   *   }
   * })
   */
  upsert<T extends BaseModelUpsertArgs>(args: Prisma.SelectSubset<T, BaseModelUpsertArgs<ExtArgs>>): Prisma.Prisma__BaseModelClient<runtime.Types.Result.GetResult<Prisma.$BaseModelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of BaseModels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseModelCountArgs} args - Arguments to filter BaseModels to count.
   * @example
   * // Count the number of BaseModels
   * const count = await prisma.baseModel.count({
   *   where: {
   *     // ... the filter for the BaseModels we want to count
   *   }
   * })
  **/
  count<T extends BaseModelCountArgs>(
    args?: Prisma.Subset<T, BaseModelCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BaseModelCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a BaseModel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BaseModelAggregateArgs>(args: Prisma.Subset<T, BaseModelAggregateArgs>): Prisma.PrismaPromise<GetBaseModelAggregateType<T>>

  /**
   * Group by BaseModel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseModelGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BaseModelGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BaseModelGroupByArgs['orderBy'] }
      : { orderBy?: BaseModelGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BaseModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBaseModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the BaseModel model
 */
readonly fields: BaseModelFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BaseModel.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BaseModelClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  modelVersions<T extends Prisma.BaseModel$modelVersionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BaseModel$modelVersionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ModelVersionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  baseModelTypes<T extends Prisma.BaseModel$baseModelTypesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BaseModel$baseModelTypesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BaseModelTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the BaseModel model
 */
export interface BaseModelFieldRefs {
  readonly id: Prisma.FieldRef<"BaseModel", 'Int'>
  readonly name: Prisma.FieldRef<"BaseModel", 'String'>
}
    

// Custom InputTypes
/**
 * BaseModel findUnique
 */
export type BaseModelFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModel
   */
  select?: Prisma.BaseModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModel
   */
  omit?: Prisma.BaseModelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelInclude<ExtArgs> | null
  /**
   * Filter, which BaseModel to fetch.
   */
  where: Prisma.BaseModelWhereUniqueInput
}

/**
 * BaseModel findUniqueOrThrow
 */
export type BaseModelFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModel
   */
  select?: Prisma.BaseModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModel
   */
  omit?: Prisma.BaseModelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelInclude<ExtArgs> | null
  /**
   * Filter, which BaseModel to fetch.
   */
  where: Prisma.BaseModelWhereUniqueInput
}

/**
 * BaseModel findFirst
 */
export type BaseModelFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModel
   */
  select?: Prisma.BaseModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModel
   */
  omit?: Prisma.BaseModelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelInclude<ExtArgs> | null
  /**
   * Filter, which BaseModel to fetch.
   */
  where?: Prisma.BaseModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BaseModels to fetch.
   */
  orderBy?: Prisma.BaseModelOrderByWithRelationInput | Prisma.BaseModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BaseModels.
   */
  cursor?: Prisma.BaseModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BaseModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BaseModels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BaseModels.
   */
  distinct?: Prisma.BaseModelScalarFieldEnum | Prisma.BaseModelScalarFieldEnum[]
}

/**
 * BaseModel findFirstOrThrow
 */
export type BaseModelFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModel
   */
  select?: Prisma.BaseModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModel
   */
  omit?: Prisma.BaseModelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelInclude<ExtArgs> | null
  /**
   * Filter, which BaseModel to fetch.
   */
  where?: Prisma.BaseModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BaseModels to fetch.
   */
  orderBy?: Prisma.BaseModelOrderByWithRelationInput | Prisma.BaseModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BaseModels.
   */
  cursor?: Prisma.BaseModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BaseModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BaseModels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BaseModels.
   */
  distinct?: Prisma.BaseModelScalarFieldEnum | Prisma.BaseModelScalarFieldEnum[]
}

/**
 * BaseModel findMany
 */
export type BaseModelFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModel
   */
  select?: Prisma.BaseModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModel
   */
  omit?: Prisma.BaseModelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelInclude<ExtArgs> | null
  /**
   * Filter, which BaseModels to fetch.
   */
  where?: Prisma.BaseModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BaseModels to fetch.
   */
  orderBy?: Prisma.BaseModelOrderByWithRelationInput | Prisma.BaseModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing BaseModels.
   */
  cursor?: Prisma.BaseModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BaseModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BaseModels.
   */
  skip?: number
  distinct?: Prisma.BaseModelScalarFieldEnum | Prisma.BaseModelScalarFieldEnum[]
}

/**
 * BaseModel create
 */
export type BaseModelCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModel
   */
  select?: Prisma.BaseModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModel
   */
  omit?: Prisma.BaseModelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelInclude<ExtArgs> | null
  /**
   * The data needed to create a BaseModel.
   */
  data: Prisma.XOR<Prisma.BaseModelCreateInput, Prisma.BaseModelUncheckedCreateInput>
}

/**
 * BaseModel createMany
 */
export type BaseModelCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many BaseModels.
   */
  data: Prisma.BaseModelCreateManyInput | Prisma.BaseModelCreateManyInput[]
}

/**
 * BaseModel createManyAndReturn
 */
export type BaseModelCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModel
   */
  select?: Prisma.BaseModelSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModel
   */
  omit?: Prisma.BaseModelOmit<ExtArgs> | null
  /**
   * The data used to create many BaseModels.
   */
  data: Prisma.BaseModelCreateManyInput | Prisma.BaseModelCreateManyInput[]
}

/**
 * BaseModel update
 */
export type BaseModelUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModel
   */
  select?: Prisma.BaseModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModel
   */
  omit?: Prisma.BaseModelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelInclude<ExtArgs> | null
  /**
   * The data needed to update a BaseModel.
   */
  data: Prisma.XOR<Prisma.BaseModelUpdateInput, Prisma.BaseModelUncheckedUpdateInput>
  /**
   * Choose, which BaseModel to update.
   */
  where: Prisma.BaseModelWhereUniqueInput
}

/**
 * BaseModel updateMany
 */
export type BaseModelUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update BaseModels.
   */
  data: Prisma.XOR<Prisma.BaseModelUpdateManyMutationInput, Prisma.BaseModelUncheckedUpdateManyInput>
  /**
   * Filter which BaseModels to update
   */
  where?: Prisma.BaseModelWhereInput
  /**
   * Limit how many BaseModels to update.
   */
  limit?: number
}

/**
 * BaseModel updateManyAndReturn
 */
export type BaseModelUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModel
   */
  select?: Prisma.BaseModelSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModel
   */
  omit?: Prisma.BaseModelOmit<ExtArgs> | null
  /**
   * The data used to update BaseModels.
   */
  data: Prisma.XOR<Prisma.BaseModelUpdateManyMutationInput, Prisma.BaseModelUncheckedUpdateManyInput>
  /**
   * Filter which BaseModels to update
   */
  where?: Prisma.BaseModelWhereInput
  /**
   * Limit how many BaseModels to update.
   */
  limit?: number
}

/**
 * BaseModel upsert
 */
export type BaseModelUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModel
   */
  select?: Prisma.BaseModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModel
   */
  omit?: Prisma.BaseModelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelInclude<ExtArgs> | null
  /**
   * The filter to search for the BaseModel to update in case it exists.
   */
  where: Prisma.BaseModelWhereUniqueInput
  /**
   * In case the BaseModel found by the `where` argument doesn't exist, create a new BaseModel with this data.
   */
  create: Prisma.XOR<Prisma.BaseModelCreateInput, Prisma.BaseModelUncheckedCreateInput>
  /**
   * In case the BaseModel was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BaseModelUpdateInput, Prisma.BaseModelUncheckedUpdateInput>
}

/**
 * BaseModel delete
 */
export type BaseModelDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModel
   */
  select?: Prisma.BaseModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModel
   */
  omit?: Prisma.BaseModelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelInclude<ExtArgs> | null
  /**
   * Filter which BaseModel to delete.
   */
  where: Prisma.BaseModelWhereUniqueInput
}

/**
 * BaseModel deleteMany
 */
export type BaseModelDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BaseModels to delete
   */
  where?: Prisma.BaseModelWhereInput
  /**
   * Limit how many BaseModels to delete.
   */
  limit?: number
}

/**
 * BaseModel.modelVersions
 */
export type BaseModel$modelVersionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersion
   */
  select?: Prisma.ModelVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersion
   */
  omit?: Prisma.ModelVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionInclude<ExtArgs> | null
  where?: Prisma.ModelVersionWhereInput
  orderBy?: Prisma.ModelVersionOrderByWithRelationInput | Prisma.ModelVersionOrderByWithRelationInput[]
  cursor?: Prisma.ModelVersionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ModelVersionScalarFieldEnum | Prisma.ModelVersionScalarFieldEnum[]
}

/**
 * BaseModel.baseModelTypes
 */
export type BaseModel$baseModelTypesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModelType
   */
  select?: Prisma.BaseModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModelType
   */
  omit?: Prisma.BaseModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelTypeInclude<ExtArgs> | null
  where?: Prisma.BaseModelTypeWhereInput
  orderBy?: Prisma.BaseModelTypeOrderByWithRelationInput | Prisma.BaseModelTypeOrderByWithRelationInput[]
  cursor?: Prisma.BaseModelTypeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.BaseModelTypeScalarFieldEnum | Prisma.BaseModelTypeScalarFieldEnum[]
}

/**
 * BaseModel without action
 */
export type BaseModelDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModel
   */
  select?: Prisma.BaseModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModel
   */
  omit?: Prisma.BaseModelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelInclude<ExtArgs> | null
}
