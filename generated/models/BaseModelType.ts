
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `BaseModelType` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model BaseModelType
 * 
 */
export type BaseModelTypeModel = runtime.Types.Result.DefaultSelection<Prisma.$BaseModelTypePayload>

export type AggregateBaseModelType = {
  _count: BaseModelTypeCountAggregateOutputType | null
  _avg: BaseModelTypeAvgAggregateOutputType | null
  _sum: BaseModelTypeSumAggregateOutputType | null
  _min: BaseModelTypeMinAggregateOutputType | null
  _max: BaseModelTypeMaxAggregateOutputType | null
}

export type BaseModelTypeAvgAggregateOutputType = {
  id: number | null
  baseModelId: number | null
}

export type BaseModelTypeSumAggregateOutputType = {
  id: number | null
  baseModelId: number | null
}

export type BaseModelTypeMinAggregateOutputType = {
  id: number | null
  name: string | null
  baseModelId: number | null
}

export type BaseModelTypeMaxAggregateOutputType = {
  id: number | null
  name: string | null
  baseModelId: number | null
}

export type BaseModelTypeCountAggregateOutputType = {
  id: number
  name: number
  baseModelId: number
  _all: number
}


export type BaseModelTypeAvgAggregateInputType = {
  id?: true
  baseModelId?: true
}

export type BaseModelTypeSumAggregateInputType = {
  id?: true
  baseModelId?: true
}

export type BaseModelTypeMinAggregateInputType = {
  id?: true
  name?: true
  baseModelId?: true
}

export type BaseModelTypeMaxAggregateInputType = {
  id?: true
  name?: true
  baseModelId?: true
}

export type BaseModelTypeCountAggregateInputType = {
  id?: true
  name?: true
  baseModelId?: true
  _all?: true
}

export type BaseModelTypeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BaseModelType to aggregate.
   */
  where?: Prisma.BaseModelTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BaseModelTypes to fetch.
   */
  orderBy?: Prisma.BaseModelTypeOrderByWithRelationInput | Prisma.BaseModelTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BaseModelTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BaseModelTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BaseModelTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned BaseModelTypes
  **/
  _count?: true | BaseModelTypeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BaseModelTypeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BaseModelTypeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BaseModelTypeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BaseModelTypeMaxAggregateInputType
}

export type GetBaseModelTypeAggregateType<T extends BaseModelTypeAggregateArgs> = {
      [P in keyof T & keyof AggregateBaseModelType]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBaseModelType[P]>
    : Prisma.GetScalarType<T[P], AggregateBaseModelType[P]>
}




export type BaseModelTypeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BaseModelTypeWhereInput
  orderBy?: Prisma.BaseModelTypeOrderByWithAggregationInput | Prisma.BaseModelTypeOrderByWithAggregationInput[]
  by: Prisma.BaseModelTypeScalarFieldEnum[] | Prisma.BaseModelTypeScalarFieldEnum
  having?: Prisma.BaseModelTypeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BaseModelTypeCountAggregateInputType | true
  _avg?: BaseModelTypeAvgAggregateInputType
  _sum?: BaseModelTypeSumAggregateInputType
  _min?: BaseModelTypeMinAggregateInputType
  _max?: BaseModelTypeMaxAggregateInputType
}

export type BaseModelTypeGroupByOutputType = {
  id: number
  name: string
  baseModelId: number
  _count: BaseModelTypeCountAggregateOutputType | null
  _avg: BaseModelTypeAvgAggregateOutputType | null
  _sum: BaseModelTypeSumAggregateOutputType | null
  _min: BaseModelTypeMinAggregateOutputType | null
  _max: BaseModelTypeMaxAggregateOutputType | null
}

type GetBaseModelTypeGroupByPayload<T extends BaseModelTypeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BaseModelTypeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BaseModelTypeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BaseModelTypeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BaseModelTypeGroupByOutputType[P]>
      }
    >
  >



export type BaseModelTypeWhereInput = {
  AND?: Prisma.BaseModelTypeWhereInput | Prisma.BaseModelTypeWhereInput[]
  OR?: Prisma.BaseModelTypeWhereInput[]
  NOT?: Prisma.BaseModelTypeWhereInput | Prisma.BaseModelTypeWhereInput[]
  id?: Prisma.IntFilter<"BaseModelType"> | number
  name?: Prisma.StringFilter<"BaseModelType"> | string
  baseModelId?: Prisma.IntFilter<"BaseModelType"> | number
  modelVersions?: Prisma.ModelVersionListRelationFilter
  baseModel?: Prisma.XOR<Prisma.BaseModelScalarRelationFilter, Prisma.BaseModelWhereInput>
}

export type BaseModelTypeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  baseModelId?: Prisma.SortOrder
  modelVersions?: Prisma.ModelVersionOrderByRelationAggregateInput
  baseModel?: Prisma.BaseModelOrderByWithRelationInput
}

export type BaseModelTypeWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.BaseModelTypeWhereInput | Prisma.BaseModelTypeWhereInput[]
  OR?: Prisma.BaseModelTypeWhereInput[]
  NOT?: Prisma.BaseModelTypeWhereInput | Prisma.BaseModelTypeWhereInput[]
  baseModelId?: Prisma.IntFilter<"BaseModelType"> | number
  modelVersions?: Prisma.ModelVersionListRelationFilter
  baseModel?: Prisma.XOR<Prisma.BaseModelScalarRelationFilter, Prisma.BaseModelWhereInput>
}, "id" | "name">

export type BaseModelTypeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  baseModelId?: Prisma.SortOrder
  _count?: Prisma.BaseModelTypeCountOrderByAggregateInput
  _avg?: Prisma.BaseModelTypeAvgOrderByAggregateInput
  _max?: Prisma.BaseModelTypeMaxOrderByAggregateInput
  _min?: Prisma.BaseModelTypeMinOrderByAggregateInput
  _sum?: Prisma.BaseModelTypeSumOrderByAggregateInput
}

export type BaseModelTypeScalarWhereWithAggregatesInput = {
  AND?: Prisma.BaseModelTypeScalarWhereWithAggregatesInput | Prisma.BaseModelTypeScalarWhereWithAggregatesInput[]
  OR?: Prisma.BaseModelTypeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BaseModelTypeScalarWhereWithAggregatesInput | Prisma.BaseModelTypeScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"BaseModelType"> | number
  name?: Prisma.StringWithAggregatesFilter<"BaseModelType"> | string
  baseModelId?: Prisma.IntWithAggregatesFilter<"BaseModelType"> | number
}

export type BaseModelTypeCreateInput = {
  name: string
  modelVersions?: Prisma.ModelVersionCreateNestedManyWithoutBaseModelTypeInput
  baseModel: Prisma.BaseModelCreateNestedOneWithoutBaseModelTypesInput
}

export type BaseModelTypeUncheckedCreateInput = {
  id?: number
  name: string
  baseModelId: number
  modelVersions?: Prisma.ModelVersionUncheckedCreateNestedManyWithoutBaseModelTypeInput
}

export type BaseModelTypeUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  modelVersions?: Prisma.ModelVersionUpdateManyWithoutBaseModelTypeNestedInput
  baseModel?: Prisma.BaseModelUpdateOneRequiredWithoutBaseModelTypesNestedInput
}

export type BaseModelTypeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  baseModelId?: Prisma.IntFieldUpdateOperationsInput | number
  modelVersions?: Prisma.ModelVersionUncheckedUpdateManyWithoutBaseModelTypeNestedInput
}

export type BaseModelTypeCreateManyInput = {
  id?: number
  name: string
  baseModelId: number
}

export type BaseModelTypeUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type BaseModelTypeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  baseModelId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BaseModelTypeListRelationFilter = {
  every?: Prisma.BaseModelTypeWhereInput
  some?: Prisma.BaseModelTypeWhereInput
  none?: Prisma.BaseModelTypeWhereInput
}

export type BaseModelTypeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type BaseModelTypeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  baseModelId?: Prisma.SortOrder
}

export type BaseModelTypeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  baseModelId?: Prisma.SortOrder
}

export type BaseModelTypeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  baseModelId?: Prisma.SortOrder
}

export type BaseModelTypeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  baseModelId?: Prisma.SortOrder
}

export type BaseModelTypeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  baseModelId?: Prisma.SortOrder
}

export type BaseModelTypeNullableScalarRelationFilter = {
  is?: Prisma.BaseModelTypeWhereInput | null
  isNot?: Prisma.BaseModelTypeWhereInput | null
}

export type BaseModelTypeCreateNestedManyWithoutBaseModelInput = {
  create?: Prisma.XOR<Prisma.BaseModelTypeCreateWithoutBaseModelInput, Prisma.BaseModelTypeUncheckedCreateWithoutBaseModelInput> | Prisma.BaseModelTypeCreateWithoutBaseModelInput[] | Prisma.BaseModelTypeUncheckedCreateWithoutBaseModelInput[]
  connectOrCreate?: Prisma.BaseModelTypeCreateOrConnectWithoutBaseModelInput | Prisma.BaseModelTypeCreateOrConnectWithoutBaseModelInput[]
  createMany?: Prisma.BaseModelTypeCreateManyBaseModelInputEnvelope
  connect?: Prisma.BaseModelTypeWhereUniqueInput | Prisma.BaseModelTypeWhereUniqueInput[]
}

export type BaseModelTypeUncheckedCreateNestedManyWithoutBaseModelInput = {
  create?: Prisma.XOR<Prisma.BaseModelTypeCreateWithoutBaseModelInput, Prisma.BaseModelTypeUncheckedCreateWithoutBaseModelInput> | Prisma.BaseModelTypeCreateWithoutBaseModelInput[] | Prisma.BaseModelTypeUncheckedCreateWithoutBaseModelInput[]
  connectOrCreate?: Prisma.BaseModelTypeCreateOrConnectWithoutBaseModelInput | Prisma.BaseModelTypeCreateOrConnectWithoutBaseModelInput[]
  createMany?: Prisma.BaseModelTypeCreateManyBaseModelInputEnvelope
  connect?: Prisma.BaseModelTypeWhereUniqueInput | Prisma.BaseModelTypeWhereUniqueInput[]
}

export type BaseModelTypeUpdateManyWithoutBaseModelNestedInput = {
  create?: Prisma.XOR<Prisma.BaseModelTypeCreateWithoutBaseModelInput, Prisma.BaseModelTypeUncheckedCreateWithoutBaseModelInput> | Prisma.BaseModelTypeCreateWithoutBaseModelInput[] | Prisma.BaseModelTypeUncheckedCreateWithoutBaseModelInput[]
  connectOrCreate?: Prisma.BaseModelTypeCreateOrConnectWithoutBaseModelInput | Prisma.BaseModelTypeCreateOrConnectWithoutBaseModelInput[]
  upsert?: Prisma.BaseModelTypeUpsertWithWhereUniqueWithoutBaseModelInput | Prisma.BaseModelTypeUpsertWithWhereUniqueWithoutBaseModelInput[]
  createMany?: Prisma.BaseModelTypeCreateManyBaseModelInputEnvelope
  set?: Prisma.BaseModelTypeWhereUniqueInput | Prisma.BaseModelTypeWhereUniqueInput[]
  disconnect?: Prisma.BaseModelTypeWhereUniqueInput | Prisma.BaseModelTypeWhereUniqueInput[]
  delete?: Prisma.BaseModelTypeWhereUniqueInput | Prisma.BaseModelTypeWhereUniqueInput[]
  connect?: Prisma.BaseModelTypeWhereUniqueInput | Prisma.BaseModelTypeWhereUniqueInput[]
  update?: Prisma.BaseModelTypeUpdateWithWhereUniqueWithoutBaseModelInput | Prisma.BaseModelTypeUpdateWithWhereUniqueWithoutBaseModelInput[]
  updateMany?: Prisma.BaseModelTypeUpdateManyWithWhereWithoutBaseModelInput | Prisma.BaseModelTypeUpdateManyWithWhereWithoutBaseModelInput[]
  deleteMany?: Prisma.BaseModelTypeScalarWhereInput | Prisma.BaseModelTypeScalarWhereInput[]
}

export type BaseModelTypeUncheckedUpdateManyWithoutBaseModelNestedInput = {
  create?: Prisma.XOR<Prisma.BaseModelTypeCreateWithoutBaseModelInput, Prisma.BaseModelTypeUncheckedCreateWithoutBaseModelInput> | Prisma.BaseModelTypeCreateWithoutBaseModelInput[] | Prisma.BaseModelTypeUncheckedCreateWithoutBaseModelInput[]
  connectOrCreate?: Prisma.BaseModelTypeCreateOrConnectWithoutBaseModelInput | Prisma.BaseModelTypeCreateOrConnectWithoutBaseModelInput[]
  upsert?: Prisma.BaseModelTypeUpsertWithWhereUniqueWithoutBaseModelInput | Prisma.BaseModelTypeUpsertWithWhereUniqueWithoutBaseModelInput[]
  createMany?: Prisma.BaseModelTypeCreateManyBaseModelInputEnvelope
  set?: Prisma.BaseModelTypeWhereUniqueInput | Prisma.BaseModelTypeWhereUniqueInput[]
  disconnect?: Prisma.BaseModelTypeWhereUniqueInput | Prisma.BaseModelTypeWhereUniqueInput[]
  delete?: Prisma.BaseModelTypeWhereUniqueInput | Prisma.BaseModelTypeWhereUniqueInput[]
  connect?: Prisma.BaseModelTypeWhereUniqueInput | Prisma.BaseModelTypeWhereUniqueInput[]
  update?: Prisma.BaseModelTypeUpdateWithWhereUniqueWithoutBaseModelInput | Prisma.BaseModelTypeUpdateWithWhereUniqueWithoutBaseModelInput[]
  updateMany?: Prisma.BaseModelTypeUpdateManyWithWhereWithoutBaseModelInput | Prisma.BaseModelTypeUpdateManyWithWhereWithoutBaseModelInput[]
  deleteMany?: Prisma.BaseModelTypeScalarWhereInput | Prisma.BaseModelTypeScalarWhereInput[]
}

export type BaseModelTypeCreateNestedOneWithoutModelVersionsInput = {
  create?: Prisma.XOR<Prisma.BaseModelTypeCreateWithoutModelVersionsInput, Prisma.BaseModelTypeUncheckedCreateWithoutModelVersionsInput>
  connectOrCreate?: Prisma.BaseModelTypeCreateOrConnectWithoutModelVersionsInput
  connect?: Prisma.BaseModelTypeWhereUniqueInput
}

export type BaseModelTypeUpdateOneWithoutModelVersionsNestedInput = {
  create?: Prisma.XOR<Prisma.BaseModelTypeCreateWithoutModelVersionsInput, Prisma.BaseModelTypeUncheckedCreateWithoutModelVersionsInput>
  connectOrCreate?: Prisma.BaseModelTypeCreateOrConnectWithoutModelVersionsInput
  upsert?: Prisma.BaseModelTypeUpsertWithoutModelVersionsInput
  disconnect?: Prisma.BaseModelTypeWhereInput | boolean
  delete?: Prisma.BaseModelTypeWhereInput | boolean
  connect?: Prisma.BaseModelTypeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.BaseModelTypeUpdateToOneWithWhereWithoutModelVersionsInput, Prisma.BaseModelTypeUpdateWithoutModelVersionsInput>, Prisma.BaseModelTypeUncheckedUpdateWithoutModelVersionsInput>
}

export type BaseModelTypeCreateWithoutBaseModelInput = {
  name: string
  modelVersions?: Prisma.ModelVersionCreateNestedManyWithoutBaseModelTypeInput
}

export type BaseModelTypeUncheckedCreateWithoutBaseModelInput = {
  id?: number
  name: string
  modelVersions?: Prisma.ModelVersionUncheckedCreateNestedManyWithoutBaseModelTypeInput
}

export type BaseModelTypeCreateOrConnectWithoutBaseModelInput = {
  where: Prisma.BaseModelTypeWhereUniqueInput
  create: Prisma.XOR<Prisma.BaseModelTypeCreateWithoutBaseModelInput, Prisma.BaseModelTypeUncheckedCreateWithoutBaseModelInput>
}

export type BaseModelTypeCreateManyBaseModelInputEnvelope = {
  data: Prisma.BaseModelTypeCreateManyBaseModelInput | Prisma.BaseModelTypeCreateManyBaseModelInput[]
}

export type BaseModelTypeUpsertWithWhereUniqueWithoutBaseModelInput = {
  where: Prisma.BaseModelTypeWhereUniqueInput
  update: Prisma.XOR<Prisma.BaseModelTypeUpdateWithoutBaseModelInput, Prisma.BaseModelTypeUncheckedUpdateWithoutBaseModelInput>
  create: Prisma.XOR<Prisma.BaseModelTypeCreateWithoutBaseModelInput, Prisma.BaseModelTypeUncheckedCreateWithoutBaseModelInput>
}

export type BaseModelTypeUpdateWithWhereUniqueWithoutBaseModelInput = {
  where: Prisma.BaseModelTypeWhereUniqueInput
  data: Prisma.XOR<Prisma.BaseModelTypeUpdateWithoutBaseModelInput, Prisma.BaseModelTypeUncheckedUpdateWithoutBaseModelInput>
}

export type BaseModelTypeUpdateManyWithWhereWithoutBaseModelInput = {
  where: Prisma.BaseModelTypeScalarWhereInput
  data: Prisma.XOR<Prisma.BaseModelTypeUpdateManyMutationInput, Prisma.BaseModelTypeUncheckedUpdateManyWithoutBaseModelInput>
}

export type BaseModelTypeScalarWhereInput = {
  AND?: Prisma.BaseModelTypeScalarWhereInput | Prisma.BaseModelTypeScalarWhereInput[]
  OR?: Prisma.BaseModelTypeScalarWhereInput[]
  NOT?: Prisma.BaseModelTypeScalarWhereInput | Prisma.BaseModelTypeScalarWhereInput[]
  id?: Prisma.IntFilter<"BaseModelType"> | number
  name?: Prisma.StringFilter<"BaseModelType"> | string
  baseModelId?: Prisma.IntFilter<"BaseModelType"> | number
}

export type BaseModelTypeCreateWithoutModelVersionsInput = {
  name: string
  baseModel: Prisma.BaseModelCreateNestedOneWithoutBaseModelTypesInput
}

export type BaseModelTypeUncheckedCreateWithoutModelVersionsInput = {
  id?: number
  name: string
  baseModelId: number
}

export type BaseModelTypeCreateOrConnectWithoutModelVersionsInput = {
  where: Prisma.BaseModelTypeWhereUniqueInput
  create: Prisma.XOR<Prisma.BaseModelTypeCreateWithoutModelVersionsInput, Prisma.BaseModelTypeUncheckedCreateWithoutModelVersionsInput>
}

export type BaseModelTypeUpsertWithoutModelVersionsInput = {
  update: Prisma.XOR<Prisma.BaseModelTypeUpdateWithoutModelVersionsInput, Prisma.BaseModelTypeUncheckedUpdateWithoutModelVersionsInput>
  create: Prisma.XOR<Prisma.BaseModelTypeCreateWithoutModelVersionsInput, Prisma.BaseModelTypeUncheckedCreateWithoutModelVersionsInput>
  where?: Prisma.BaseModelTypeWhereInput
}

export type BaseModelTypeUpdateToOneWithWhereWithoutModelVersionsInput = {
  where?: Prisma.BaseModelTypeWhereInput
  data: Prisma.XOR<Prisma.BaseModelTypeUpdateWithoutModelVersionsInput, Prisma.BaseModelTypeUncheckedUpdateWithoutModelVersionsInput>
}

export type BaseModelTypeUpdateWithoutModelVersionsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  baseModel?: Prisma.BaseModelUpdateOneRequiredWithoutBaseModelTypesNestedInput
}

export type BaseModelTypeUncheckedUpdateWithoutModelVersionsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  baseModelId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BaseModelTypeCreateManyBaseModelInput = {
  id?: number
  name: string
}

export type BaseModelTypeUpdateWithoutBaseModelInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  modelVersions?: Prisma.ModelVersionUpdateManyWithoutBaseModelTypeNestedInput
}

export type BaseModelTypeUncheckedUpdateWithoutBaseModelInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  modelVersions?: Prisma.ModelVersionUncheckedUpdateManyWithoutBaseModelTypeNestedInput
}

export type BaseModelTypeUncheckedUpdateManyWithoutBaseModelInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type BaseModelTypeCountOutputType
 */

export type BaseModelTypeCountOutputType = {
  modelVersions: number
}

export type BaseModelTypeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  modelVersions?: boolean | BaseModelTypeCountOutputTypeCountModelVersionsArgs
}

/**
 * BaseModelTypeCountOutputType without action
 */
export type BaseModelTypeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModelTypeCountOutputType
   */
  select?: Prisma.BaseModelTypeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * BaseModelTypeCountOutputType without action
 */
export type BaseModelTypeCountOutputTypeCountModelVersionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ModelVersionWhereInput
}


export type BaseModelTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  baseModelId?: boolean
  modelVersions?: boolean | Prisma.BaseModelType$modelVersionsArgs<ExtArgs>
  baseModel?: boolean | Prisma.BaseModelDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.BaseModelTypeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["baseModelType"]>

export type BaseModelTypeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  baseModelId?: boolean
  baseModel?: boolean | Prisma.BaseModelDefaultArgs<ExtArgs>
}, ExtArgs["result"]["baseModelType"]>

export type BaseModelTypeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  baseModelId?: boolean
  baseModel?: boolean | Prisma.BaseModelDefaultArgs<ExtArgs>
}, ExtArgs["result"]["baseModelType"]>

export type BaseModelTypeSelectScalar = {
  id?: boolean
  name?: boolean
  baseModelId?: boolean
}

export type BaseModelTypeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "baseModelId", ExtArgs["result"]["baseModelType"]>
export type BaseModelTypeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  modelVersions?: boolean | Prisma.BaseModelType$modelVersionsArgs<ExtArgs>
  baseModel?: boolean | Prisma.BaseModelDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.BaseModelTypeCountOutputTypeDefaultArgs<ExtArgs>
}
export type BaseModelTypeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  baseModel?: boolean | Prisma.BaseModelDefaultArgs<ExtArgs>
}
export type BaseModelTypeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  baseModel?: boolean | Prisma.BaseModelDefaultArgs<ExtArgs>
}

export type $BaseModelTypePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "BaseModelType"
  objects: {
    modelVersions: Prisma.$ModelVersionPayload<ExtArgs>[]
    baseModel: Prisma.$BaseModelPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    baseModelId: number
  }, ExtArgs["result"]["baseModelType"]>
  composites: {}
}

export type BaseModelTypeGetPayload<S extends boolean | null | undefined | BaseModelTypeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BaseModelTypePayload, S>

export type BaseModelTypeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BaseModelTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BaseModelTypeCountAggregateInputType | true
  }

export interface BaseModelTypeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BaseModelType'], meta: { name: 'BaseModelType' } }
  /**
   * Find zero or one BaseModelType that matches the filter.
   * @param {BaseModelTypeFindUniqueArgs} args - Arguments to find a BaseModelType
   * @example
   * // Get one BaseModelType
   * const baseModelType = await prisma.baseModelType.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BaseModelTypeFindUniqueArgs>(args: Prisma.SelectSubset<T, BaseModelTypeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BaseModelTypeClient<runtime.Types.Result.GetResult<Prisma.$BaseModelTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one BaseModelType that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BaseModelTypeFindUniqueOrThrowArgs} args - Arguments to find a BaseModelType
   * @example
   * // Get one BaseModelType
   * const baseModelType = await prisma.baseModelType.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BaseModelTypeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BaseModelTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BaseModelTypeClient<runtime.Types.Result.GetResult<Prisma.$BaseModelTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BaseModelType that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseModelTypeFindFirstArgs} args - Arguments to find a BaseModelType
   * @example
   * // Get one BaseModelType
   * const baseModelType = await prisma.baseModelType.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BaseModelTypeFindFirstArgs>(args?: Prisma.SelectSubset<T, BaseModelTypeFindFirstArgs<ExtArgs>>): Prisma.Prisma__BaseModelTypeClient<runtime.Types.Result.GetResult<Prisma.$BaseModelTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BaseModelType that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseModelTypeFindFirstOrThrowArgs} args - Arguments to find a BaseModelType
   * @example
   * // Get one BaseModelType
   * const baseModelType = await prisma.baseModelType.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BaseModelTypeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BaseModelTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BaseModelTypeClient<runtime.Types.Result.GetResult<Prisma.$BaseModelTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more BaseModelTypes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseModelTypeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BaseModelTypes
   * const baseModelTypes = await prisma.baseModelType.findMany()
   * 
   * // Get first 10 BaseModelTypes
   * const baseModelTypes = await prisma.baseModelType.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const baseModelTypeWithIdOnly = await prisma.baseModelType.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BaseModelTypeFindManyArgs>(args?: Prisma.SelectSubset<T, BaseModelTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BaseModelTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a BaseModelType.
   * @param {BaseModelTypeCreateArgs} args - Arguments to create a BaseModelType.
   * @example
   * // Create one BaseModelType
   * const BaseModelType = await prisma.baseModelType.create({
   *   data: {
   *     // ... data to create a BaseModelType
   *   }
   * })
   * 
   */
  create<T extends BaseModelTypeCreateArgs>(args: Prisma.SelectSubset<T, BaseModelTypeCreateArgs<ExtArgs>>): Prisma.Prisma__BaseModelTypeClient<runtime.Types.Result.GetResult<Prisma.$BaseModelTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many BaseModelTypes.
   * @param {BaseModelTypeCreateManyArgs} args - Arguments to create many BaseModelTypes.
   * @example
   * // Create many BaseModelTypes
   * const baseModelType = await prisma.baseModelType.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BaseModelTypeCreateManyArgs>(args?: Prisma.SelectSubset<T, BaseModelTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many BaseModelTypes and returns the data saved in the database.
   * @param {BaseModelTypeCreateManyAndReturnArgs} args - Arguments to create many BaseModelTypes.
   * @example
   * // Create many BaseModelTypes
   * const baseModelType = await prisma.baseModelType.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many BaseModelTypes and only return the `id`
   * const baseModelTypeWithIdOnly = await prisma.baseModelType.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BaseModelTypeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BaseModelTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BaseModelTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a BaseModelType.
   * @param {BaseModelTypeDeleteArgs} args - Arguments to delete one BaseModelType.
   * @example
   * // Delete one BaseModelType
   * const BaseModelType = await prisma.baseModelType.delete({
   *   where: {
   *     // ... filter to delete one BaseModelType
   *   }
   * })
   * 
   */
  delete<T extends BaseModelTypeDeleteArgs>(args: Prisma.SelectSubset<T, BaseModelTypeDeleteArgs<ExtArgs>>): Prisma.Prisma__BaseModelTypeClient<runtime.Types.Result.GetResult<Prisma.$BaseModelTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one BaseModelType.
   * @param {BaseModelTypeUpdateArgs} args - Arguments to update one BaseModelType.
   * @example
   * // Update one BaseModelType
   * const baseModelType = await prisma.baseModelType.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BaseModelTypeUpdateArgs>(args: Prisma.SelectSubset<T, BaseModelTypeUpdateArgs<ExtArgs>>): Prisma.Prisma__BaseModelTypeClient<runtime.Types.Result.GetResult<Prisma.$BaseModelTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more BaseModelTypes.
   * @param {BaseModelTypeDeleteManyArgs} args - Arguments to filter BaseModelTypes to delete.
   * @example
   * // Delete a few BaseModelTypes
   * const { count } = await prisma.baseModelType.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BaseModelTypeDeleteManyArgs>(args?: Prisma.SelectSubset<T, BaseModelTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BaseModelTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseModelTypeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BaseModelTypes
   * const baseModelType = await prisma.baseModelType.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BaseModelTypeUpdateManyArgs>(args: Prisma.SelectSubset<T, BaseModelTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BaseModelTypes and returns the data updated in the database.
   * @param {BaseModelTypeUpdateManyAndReturnArgs} args - Arguments to update many BaseModelTypes.
   * @example
   * // Update many BaseModelTypes
   * const baseModelType = await prisma.baseModelType.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more BaseModelTypes and only return the `id`
   * const baseModelTypeWithIdOnly = await prisma.baseModelType.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BaseModelTypeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BaseModelTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BaseModelTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one BaseModelType.
   * @param {BaseModelTypeUpsertArgs} args - Arguments to update or create a BaseModelType.
   * @example
   * // Update or create a BaseModelType
   * const baseModelType = await prisma.baseModelType.upsert({
   *   create: {
   *     // ... data to create a BaseModelType
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BaseModelType we want to update
   *   }
   * })
   */
  upsert<T extends BaseModelTypeUpsertArgs>(args: Prisma.SelectSubset<T, BaseModelTypeUpsertArgs<ExtArgs>>): Prisma.Prisma__BaseModelTypeClient<runtime.Types.Result.GetResult<Prisma.$BaseModelTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of BaseModelTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseModelTypeCountArgs} args - Arguments to filter BaseModelTypes to count.
   * @example
   * // Count the number of BaseModelTypes
   * const count = await prisma.baseModelType.count({
   *   where: {
   *     // ... the filter for the BaseModelTypes we want to count
   *   }
   * })
  **/
  count<T extends BaseModelTypeCountArgs>(
    args?: Prisma.Subset<T, BaseModelTypeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BaseModelTypeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a BaseModelType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseModelTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BaseModelTypeAggregateArgs>(args: Prisma.Subset<T, BaseModelTypeAggregateArgs>): Prisma.PrismaPromise<GetBaseModelTypeAggregateType<T>>

  /**
   * Group by BaseModelType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseModelTypeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BaseModelTypeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BaseModelTypeGroupByArgs['orderBy'] }
      : { orderBy?: BaseModelTypeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BaseModelTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBaseModelTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the BaseModelType model
 */
readonly fields: BaseModelTypeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BaseModelType.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BaseModelTypeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  modelVersions<T extends Prisma.BaseModelType$modelVersionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BaseModelType$modelVersionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ModelVersionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  baseModel<T extends Prisma.BaseModelDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BaseModelDefaultArgs<ExtArgs>>): Prisma.Prisma__BaseModelClient<runtime.Types.Result.GetResult<Prisma.$BaseModelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the BaseModelType model
 */
export interface BaseModelTypeFieldRefs {
  readonly id: Prisma.FieldRef<"BaseModelType", 'Int'>
  readonly name: Prisma.FieldRef<"BaseModelType", 'String'>
  readonly baseModelId: Prisma.FieldRef<"BaseModelType", 'Int'>
}
    

// Custom InputTypes
/**
 * BaseModelType findUnique
 */
export type BaseModelTypeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModelType
   */
  select?: Prisma.BaseModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModelType
   */
  omit?: Prisma.BaseModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelTypeInclude<ExtArgs> | null
  /**
   * Filter, which BaseModelType to fetch.
   */
  where: Prisma.BaseModelTypeWhereUniqueInput
}

/**
 * BaseModelType findUniqueOrThrow
 */
export type BaseModelTypeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModelType
   */
  select?: Prisma.BaseModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModelType
   */
  omit?: Prisma.BaseModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelTypeInclude<ExtArgs> | null
  /**
   * Filter, which BaseModelType to fetch.
   */
  where: Prisma.BaseModelTypeWhereUniqueInput
}

/**
 * BaseModelType findFirst
 */
export type BaseModelTypeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModelType
   */
  select?: Prisma.BaseModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModelType
   */
  omit?: Prisma.BaseModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelTypeInclude<ExtArgs> | null
  /**
   * Filter, which BaseModelType to fetch.
   */
  where?: Prisma.BaseModelTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BaseModelTypes to fetch.
   */
  orderBy?: Prisma.BaseModelTypeOrderByWithRelationInput | Prisma.BaseModelTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BaseModelTypes.
   */
  cursor?: Prisma.BaseModelTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BaseModelTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BaseModelTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BaseModelTypes.
   */
  distinct?: Prisma.BaseModelTypeScalarFieldEnum | Prisma.BaseModelTypeScalarFieldEnum[]
}

/**
 * BaseModelType findFirstOrThrow
 */
export type BaseModelTypeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModelType
   */
  select?: Prisma.BaseModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModelType
   */
  omit?: Prisma.BaseModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelTypeInclude<ExtArgs> | null
  /**
   * Filter, which BaseModelType to fetch.
   */
  where?: Prisma.BaseModelTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BaseModelTypes to fetch.
   */
  orderBy?: Prisma.BaseModelTypeOrderByWithRelationInput | Prisma.BaseModelTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BaseModelTypes.
   */
  cursor?: Prisma.BaseModelTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BaseModelTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BaseModelTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BaseModelTypes.
   */
  distinct?: Prisma.BaseModelTypeScalarFieldEnum | Prisma.BaseModelTypeScalarFieldEnum[]
}

/**
 * BaseModelType findMany
 */
export type BaseModelTypeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModelType
   */
  select?: Prisma.BaseModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModelType
   */
  omit?: Prisma.BaseModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelTypeInclude<ExtArgs> | null
  /**
   * Filter, which BaseModelTypes to fetch.
   */
  where?: Prisma.BaseModelTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BaseModelTypes to fetch.
   */
  orderBy?: Prisma.BaseModelTypeOrderByWithRelationInput | Prisma.BaseModelTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing BaseModelTypes.
   */
  cursor?: Prisma.BaseModelTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BaseModelTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BaseModelTypes.
   */
  skip?: number
  distinct?: Prisma.BaseModelTypeScalarFieldEnum | Prisma.BaseModelTypeScalarFieldEnum[]
}

/**
 * BaseModelType create
 */
export type BaseModelTypeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModelType
   */
  select?: Prisma.BaseModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModelType
   */
  omit?: Prisma.BaseModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelTypeInclude<ExtArgs> | null
  /**
   * The data needed to create a BaseModelType.
   */
  data: Prisma.XOR<Prisma.BaseModelTypeCreateInput, Prisma.BaseModelTypeUncheckedCreateInput>
}

/**
 * BaseModelType createMany
 */
export type BaseModelTypeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many BaseModelTypes.
   */
  data: Prisma.BaseModelTypeCreateManyInput | Prisma.BaseModelTypeCreateManyInput[]
}

/**
 * BaseModelType createManyAndReturn
 */
export type BaseModelTypeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModelType
   */
  select?: Prisma.BaseModelTypeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModelType
   */
  omit?: Prisma.BaseModelTypeOmit<ExtArgs> | null
  /**
   * The data used to create many BaseModelTypes.
   */
  data: Prisma.BaseModelTypeCreateManyInput | Prisma.BaseModelTypeCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelTypeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * BaseModelType update
 */
export type BaseModelTypeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModelType
   */
  select?: Prisma.BaseModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModelType
   */
  omit?: Prisma.BaseModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelTypeInclude<ExtArgs> | null
  /**
   * The data needed to update a BaseModelType.
   */
  data: Prisma.XOR<Prisma.BaseModelTypeUpdateInput, Prisma.BaseModelTypeUncheckedUpdateInput>
  /**
   * Choose, which BaseModelType to update.
   */
  where: Prisma.BaseModelTypeWhereUniqueInput
}

/**
 * BaseModelType updateMany
 */
export type BaseModelTypeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update BaseModelTypes.
   */
  data: Prisma.XOR<Prisma.BaseModelTypeUpdateManyMutationInput, Prisma.BaseModelTypeUncheckedUpdateManyInput>
  /**
   * Filter which BaseModelTypes to update
   */
  where?: Prisma.BaseModelTypeWhereInput
  /**
   * Limit how many BaseModelTypes to update.
   */
  limit?: number
}

/**
 * BaseModelType updateManyAndReturn
 */
export type BaseModelTypeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModelType
   */
  select?: Prisma.BaseModelTypeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModelType
   */
  omit?: Prisma.BaseModelTypeOmit<ExtArgs> | null
  /**
   * The data used to update BaseModelTypes.
   */
  data: Prisma.XOR<Prisma.BaseModelTypeUpdateManyMutationInput, Prisma.BaseModelTypeUncheckedUpdateManyInput>
  /**
   * Filter which BaseModelTypes to update
   */
  where?: Prisma.BaseModelTypeWhereInput
  /**
   * Limit how many BaseModelTypes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelTypeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * BaseModelType upsert
 */
export type BaseModelTypeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModelType
   */
  select?: Prisma.BaseModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModelType
   */
  omit?: Prisma.BaseModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelTypeInclude<ExtArgs> | null
  /**
   * The filter to search for the BaseModelType to update in case it exists.
   */
  where: Prisma.BaseModelTypeWhereUniqueInput
  /**
   * In case the BaseModelType found by the `where` argument doesn't exist, create a new BaseModelType with this data.
   */
  create: Prisma.XOR<Prisma.BaseModelTypeCreateInput, Prisma.BaseModelTypeUncheckedCreateInput>
  /**
   * In case the BaseModelType was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BaseModelTypeUpdateInput, Prisma.BaseModelTypeUncheckedUpdateInput>
}

/**
 * BaseModelType delete
 */
export type BaseModelTypeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModelType
   */
  select?: Prisma.BaseModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModelType
   */
  omit?: Prisma.BaseModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelTypeInclude<ExtArgs> | null
  /**
   * Filter which BaseModelType to delete.
   */
  where: Prisma.BaseModelTypeWhereUniqueInput
}

/**
 * BaseModelType deleteMany
 */
export type BaseModelTypeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BaseModelTypes to delete
   */
  where?: Prisma.BaseModelTypeWhereInput
  /**
   * Limit how many BaseModelTypes to delete.
   */
  limit?: number
}

/**
 * BaseModelType.modelVersions
 */
export type BaseModelType$modelVersionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersion
   */
  select?: Prisma.ModelVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersion
   */
  omit?: Prisma.ModelVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionInclude<ExtArgs> | null
  where?: Prisma.ModelVersionWhereInput
  orderBy?: Prisma.ModelVersionOrderByWithRelationInput | Prisma.ModelVersionOrderByWithRelationInput[]
  cursor?: Prisma.ModelVersionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ModelVersionScalarFieldEnum | Prisma.ModelVersionScalarFieldEnum[]
}

/**
 * BaseModelType without action
 */
export type BaseModelTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BaseModelType
   */
  select?: Prisma.BaseModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BaseModelType
   */
  omit?: Prisma.BaseModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BaseModelTypeInclude<ExtArgs> | null
}
