
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Creator` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Creator
 * 
 */
export type CreatorModel = runtime.Types.Result.DefaultSelection<Prisma.$CreatorPayload>

export type AggregateCreator = {
  _count: CreatorCountAggregateOutputType | null
  _avg: CreatorAvgAggregateOutputType | null
  _sum: CreatorSumAggregateOutputType | null
  _min: CreatorMinAggregateOutputType | null
  _max: CreatorMaxAggregateOutputType | null
}

export type CreatorAvgAggregateOutputType = {
  id: number | null
}

export type CreatorSumAggregateOutputType = {
  id: number | null
}

export type CreatorMinAggregateOutputType = {
  id: number | null
  username: string | null
  link: string | null
  image: string | null
}

export type CreatorMaxAggregateOutputType = {
  id: number | null
  username: string | null
  link: string | null
  image: string | null
}

export type CreatorCountAggregateOutputType = {
  id: number
  username: number
  link: number
  image: number
  _all: number
}


export type CreatorAvgAggregateInputType = {
  id?: true
}

export type CreatorSumAggregateInputType = {
  id?: true
}

export type CreatorMinAggregateInputType = {
  id?: true
  username?: true
  link?: true
  image?: true
}

export type CreatorMaxAggregateInputType = {
  id?: true
  username?: true
  link?: true
  image?: true
}

export type CreatorCountAggregateInputType = {
  id?: true
  username?: true
  link?: true
  image?: true
  _all?: true
}

export type CreatorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Creator to aggregate.
   */
  where?: Prisma.CreatorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Creators to fetch.
   */
  orderBy?: Prisma.CreatorOrderByWithRelationInput | Prisma.CreatorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CreatorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Creators from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Creators.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Creators
  **/
  _count?: true | CreatorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CreatorAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CreatorSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CreatorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CreatorMaxAggregateInputType
}

export type GetCreatorAggregateType<T extends CreatorAggregateArgs> = {
      [P in keyof T & keyof AggregateCreator]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCreator[P]>
    : Prisma.GetScalarType<T[P], AggregateCreator[P]>
}




export type CreatorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CreatorWhereInput
  orderBy?: Prisma.CreatorOrderByWithAggregationInput | Prisma.CreatorOrderByWithAggregationInput[]
  by: Prisma.CreatorScalarFieldEnum[] | Prisma.CreatorScalarFieldEnum
  having?: Prisma.CreatorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CreatorCountAggregateInputType | true
  _avg?: CreatorAvgAggregateInputType
  _sum?: CreatorSumAggregateInputType
  _min?: CreatorMinAggregateInputType
  _max?: CreatorMaxAggregateInputType
}

export type CreatorGroupByOutputType = {
  id: number
  username: string
  link: string | null
  image: string | null
  _count: CreatorCountAggregateOutputType | null
  _avg: CreatorAvgAggregateOutputType | null
  _sum: CreatorSumAggregateOutputType | null
  _min: CreatorMinAggregateOutputType | null
  _max: CreatorMaxAggregateOutputType | null
}

type GetCreatorGroupByPayload<T extends CreatorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CreatorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CreatorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CreatorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CreatorGroupByOutputType[P]>
      }
    >
  >



export type CreatorWhereInput = {
  AND?: Prisma.CreatorWhereInput | Prisma.CreatorWhereInput[]
  OR?: Prisma.CreatorWhereInput[]
  NOT?: Prisma.CreatorWhereInput | Prisma.CreatorWhereInput[]
  id?: Prisma.IntFilter<"Creator"> | number
  username?: Prisma.StringFilter<"Creator"> | string
  link?: Prisma.StringNullableFilter<"Creator"> | string | null
  image?: Prisma.StringNullableFilter<"Creator"> | string | null
  models?: Prisma.ModelListRelationFilter
}

export type CreatorOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  link?: Prisma.SortOrderInput | Prisma.SortOrder
  image?: Prisma.SortOrderInput | Prisma.SortOrder
  models?: Prisma.ModelOrderByRelationAggregateInput
}

export type CreatorWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  username?: string
  AND?: Prisma.CreatorWhereInput | Prisma.CreatorWhereInput[]
  OR?: Prisma.CreatorWhereInput[]
  NOT?: Prisma.CreatorWhereInput | Prisma.CreatorWhereInput[]
  link?: Prisma.StringNullableFilter<"Creator"> | string | null
  image?: Prisma.StringNullableFilter<"Creator"> | string | null
  models?: Prisma.ModelListRelationFilter
}, "id" | "username">

export type CreatorOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  link?: Prisma.SortOrderInput | Prisma.SortOrder
  image?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.CreatorCountOrderByAggregateInput
  _avg?: Prisma.CreatorAvgOrderByAggregateInput
  _max?: Prisma.CreatorMaxOrderByAggregateInput
  _min?: Prisma.CreatorMinOrderByAggregateInput
  _sum?: Prisma.CreatorSumOrderByAggregateInput
}

export type CreatorScalarWhereWithAggregatesInput = {
  AND?: Prisma.CreatorScalarWhereWithAggregatesInput | Prisma.CreatorScalarWhereWithAggregatesInput[]
  OR?: Prisma.CreatorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CreatorScalarWhereWithAggregatesInput | Prisma.CreatorScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Creator"> | number
  username?: Prisma.StringWithAggregatesFilter<"Creator"> | string
  link?: Prisma.StringNullableWithAggregatesFilter<"Creator"> | string | null
  image?: Prisma.StringNullableWithAggregatesFilter<"Creator"> | string | null
}

export type CreatorCreateInput = {
  username: string
  link?: string | null
  image?: string | null
  models?: Prisma.ModelCreateNestedManyWithoutCreatorInput
}

export type CreatorUncheckedCreateInput = {
  id?: number
  username: string
  link?: string | null
  image?: string | null
  models?: Prisma.ModelUncheckedCreateNestedManyWithoutCreatorInput
}

export type CreatorUpdateInput = {
  username?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  models?: Prisma.ModelUpdateManyWithoutCreatorNestedInput
}

export type CreatorUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  username?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  models?: Prisma.ModelUncheckedUpdateManyWithoutCreatorNestedInput
}

export type CreatorCreateManyInput = {
  id?: number
  username: string
  link?: string | null
  image?: string | null
}

export type CreatorUpdateManyMutationInput = {
  username?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type CreatorUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  username?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type CreatorCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  link?: Prisma.SortOrder
  image?: Prisma.SortOrder
}

export type CreatorAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type CreatorMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  link?: Prisma.SortOrder
  image?: Prisma.SortOrder
}

export type CreatorMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  link?: Prisma.SortOrder
  image?: Prisma.SortOrder
}

export type CreatorSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type CreatorNullableScalarRelationFilter = {
  is?: Prisma.CreatorWhereInput | null
  isNot?: Prisma.CreatorWhereInput | null
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type CreatorCreateNestedOneWithoutModelsInput = {
  create?: Prisma.XOR<Prisma.CreatorCreateWithoutModelsInput, Prisma.CreatorUncheckedCreateWithoutModelsInput>
  connectOrCreate?: Prisma.CreatorCreateOrConnectWithoutModelsInput
  connect?: Prisma.CreatorWhereUniqueInput
}

export type CreatorUpdateOneWithoutModelsNestedInput = {
  create?: Prisma.XOR<Prisma.CreatorCreateWithoutModelsInput, Prisma.CreatorUncheckedCreateWithoutModelsInput>
  connectOrCreate?: Prisma.CreatorCreateOrConnectWithoutModelsInput
  upsert?: Prisma.CreatorUpsertWithoutModelsInput
  disconnect?: Prisma.CreatorWhereInput | boolean
  delete?: Prisma.CreatorWhereInput | boolean
  connect?: Prisma.CreatorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CreatorUpdateToOneWithWhereWithoutModelsInput, Prisma.CreatorUpdateWithoutModelsInput>, Prisma.CreatorUncheckedUpdateWithoutModelsInput>
}

export type CreatorCreateWithoutModelsInput = {
  username: string
  link?: string | null
  image?: string | null
}

export type CreatorUncheckedCreateWithoutModelsInput = {
  id?: number
  username: string
  link?: string | null
  image?: string | null
}

export type CreatorCreateOrConnectWithoutModelsInput = {
  where: Prisma.CreatorWhereUniqueInput
  create: Prisma.XOR<Prisma.CreatorCreateWithoutModelsInput, Prisma.CreatorUncheckedCreateWithoutModelsInput>
}

export type CreatorUpsertWithoutModelsInput = {
  update: Prisma.XOR<Prisma.CreatorUpdateWithoutModelsInput, Prisma.CreatorUncheckedUpdateWithoutModelsInput>
  create: Prisma.XOR<Prisma.CreatorCreateWithoutModelsInput, Prisma.CreatorUncheckedCreateWithoutModelsInput>
  where?: Prisma.CreatorWhereInput
}

export type CreatorUpdateToOneWithWhereWithoutModelsInput = {
  where?: Prisma.CreatorWhereInput
  data: Prisma.XOR<Prisma.CreatorUpdateWithoutModelsInput, Prisma.CreatorUncheckedUpdateWithoutModelsInput>
}

export type CreatorUpdateWithoutModelsInput = {
  username?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type CreatorUncheckedUpdateWithoutModelsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  username?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type CreatorCountOutputType
 */

export type CreatorCountOutputType = {
  models: number
}

export type CreatorCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  models?: boolean | CreatorCountOutputTypeCountModelsArgs
}

/**
 * CreatorCountOutputType without action
 */
export type CreatorCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CreatorCountOutputType
   */
  select?: Prisma.CreatorCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CreatorCountOutputType without action
 */
export type CreatorCountOutputTypeCountModelsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ModelWhereInput
}


export type CreatorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  username?: boolean
  link?: boolean
  image?: boolean
  models?: boolean | Prisma.Creator$modelsArgs<ExtArgs>
  _count?: boolean | Prisma.CreatorCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["creator"]>

export type CreatorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  username?: boolean
  link?: boolean
  image?: boolean
}, ExtArgs["result"]["creator"]>

export type CreatorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  username?: boolean
  link?: boolean
  image?: boolean
}, ExtArgs["result"]["creator"]>

export type CreatorSelectScalar = {
  id?: boolean
  username?: boolean
  link?: boolean
  image?: boolean
}

export type CreatorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "username" | "link" | "image", ExtArgs["result"]["creator"]>
export type CreatorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  models?: boolean | Prisma.Creator$modelsArgs<ExtArgs>
  _count?: boolean | Prisma.CreatorCountOutputTypeDefaultArgs<ExtArgs>
}
export type CreatorIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type CreatorIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $CreatorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Creator"
  objects: {
    models: Prisma.$ModelPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    username: string
    link: string | null
    image: string | null
  }, ExtArgs["result"]["creator"]>
  composites: {}
}

export type CreatorGetPayload<S extends boolean | null | undefined | CreatorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CreatorPayload, S>

export type CreatorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CreatorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CreatorCountAggregateInputType | true
  }

export interface CreatorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Creator'], meta: { name: 'Creator' } }
  /**
   * Find zero or one Creator that matches the filter.
   * @param {CreatorFindUniqueArgs} args - Arguments to find a Creator
   * @example
   * // Get one Creator
   * const creator = await prisma.creator.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CreatorFindUniqueArgs>(args: Prisma.SelectSubset<T, CreatorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CreatorClient<runtime.Types.Result.GetResult<Prisma.$CreatorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Creator that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CreatorFindUniqueOrThrowArgs} args - Arguments to find a Creator
   * @example
   * // Get one Creator
   * const creator = await prisma.creator.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CreatorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CreatorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CreatorClient<runtime.Types.Result.GetResult<Prisma.$CreatorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Creator that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreatorFindFirstArgs} args - Arguments to find a Creator
   * @example
   * // Get one Creator
   * const creator = await prisma.creator.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CreatorFindFirstArgs>(args?: Prisma.SelectSubset<T, CreatorFindFirstArgs<ExtArgs>>): Prisma.Prisma__CreatorClient<runtime.Types.Result.GetResult<Prisma.$CreatorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Creator that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreatorFindFirstOrThrowArgs} args - Arguments to find a Creator
   * @example
   * // Get one Creator
   * const creator = await prisma.creator.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CreatorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CreatorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CreatorClient<runtime.Types.Result.GetResult<Prisma.$CreatorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Creators that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreatorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Creators
   * const creators = await prisma.creator.findMany()
   * 
   * // Get first 10 Creators
   * const creators = await prisma.creator.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const creatorWithIdOnly = await prisma.creator.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CreatorFindManyArgs>(args?: Prisma.SelectSubset<T, CreatorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CreatorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Creator.
   * @param {CreatorCreateArgs} args - Arguments to create a Creator.
   * @example
   * // Create one Creator
   * const Creator = await prisma.creator.create({
   *   data: {
   *     // ... data to create a Creator
   *   }
   * })
   * 
   */
  create<T extends CreatorCreateArgs>(args: Prisma.SelectSubset<T, CreatorCreateArgs<ExtArgs>>): Prisma.Prisma__CreatorClient<runtime.Types.Result.GetResult<Prisma.$CreatorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Creators.
   * @param {CreatorCreateManyArgs} args - Arguments to create many Creators.
   * @example
   * // Create many Creators
   * const creator = await prisma.creator.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CreatorCreateManyArgs>(args?: Prisma.SelectSubset<T, CreatorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Creators and returns the data saved in the database.
   * @param {CreatorCreateManyAndReturnArgs} args - Arguments to create many Creators.
   * @example
   * // Create many Creators
   * const creator = await prisma.creator.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Creators and only return the `id`
   * const creatorWithIdOnly = await prisma.creator.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CreatorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CreatorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CreatorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Creator.
   * @param {CreatorDeleteArgs} args - Arguments to delete one Creator.
   * @example
   * // Delete one Creator
   * const Creator = await prisma.creator.delete({
   *   where: {
   *     // ... filter to delete one Creator
   *   }
   * })
   * 
   */
  delete<T extends CreatorDeleteArgs>(args: Prisma.SelectSubset<T, CreatorDeleteArgs<ExtArgs>>): Prisma.Prisma__CreatorClient<runtime.Types.Result.GetResult<Prisma.$CreatorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Creator.
   * @param {CreatorUpdateArgs} args - Arguments to update one Creator.
   * @example
   * // Update one Creator
   * const creator = await prisma.creator.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CreatorUpdateArgs>(args: Prisma.SelectSubset<T, CreatorUpdateArgs<ExtArgs>>): Prisma.Prisma__CreatorClient<runtime.Types.Result.GetResult<Prisma.$CreatorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Creators.
   * @param {CreatorDeleteManyArgs} args - Arguments to filter Creators to delete.
   * @example
   * // Delete a few Creators
   * const { count } = await prisma.creator.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CreatorDeleteManyArgs>(args?: Prisma.SelectSubset<T, CreatorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Creators.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreatorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Creators
   * const creator = await prisma.creator.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CreatorUpdateManyArgs>(args: Prisma.SelectSubset<T, CreatorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Creators and returns the data updated in the database.
   * @param {CreatorUpdateManyAndReturnArgs} args - Arguments to update many Creators.
   * @example
   * // Update many Creators
   * const creator = await prisma.creator.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Creators and only return the `id`
   * const creatorWithIdOnly = await prisma.creator.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CreatorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CreatorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CreatorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Creator.
   * @param {CreatorUpsertArgs} args - Arguments to update or create a Creator.
   * @example
   * // Update or create a Creator
   * const creator = await prisma.creator.upsert({
   *   create: {
   *     // ... data to create a Creator
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Creator we want to update
   *   }
   * })
   */
  upsert<T extends CreatorUpsertArgs>(args: Prisma.SelectSubset<T, CreatorUpsertArgs<ExtArgs>>): Prisma.Prisma__CreatorClient<runtime.Types.Result.GetResult<Prisma.$CreatorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Creators.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreatorCountArgs} args - Arguments to filter Creators to count.
   * @example
   * // Count the number of Creators
   * const count = await prisma.creator.count({
   *   where: {
   *     // ... the filter for the Creators we want to count
   *   }
   * })
  **/
  count<T extends CreatorCountArgs>(
    args?: Prisma.Subset<T, CreatorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CreatorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Creator.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreatorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CreatorAggregateArgs>(args: Prisma.Subset<T, CreatorAggregateArgs>): Prisma.PrismaPromise<GetCreatorAggregateType<T>>

  /**
   * Group by Creator.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreatorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CreatorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CreatorGroupByArgs['orderBy'] }
      : { orderBy?: CreatorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CreatorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCreatorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Creator model
 */
readonly fields: CreatorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Creator.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CreatorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  models<T extends Prisma.Creator$modelsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Creator$modelsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Creator model
 */
export interface CreatorFieldRefs {
  readonly id: Prisma.FieldRef<"Creator", 'Int'>
  readonly username: Prisma.FieldRef<"Creator", 'String'>
  readonly link: Prisma.FieldRef<"Creator", 'String'>
  readonly image: Prisma.FieldRef<"Creator", 'String'>
}
    

// Custom InputTypes
/**
 * Creator findUnique
 */
export type CreatorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Creator
   */
  select?: Prisma.CreatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Creator
   */
  omit?: Prisma.CreatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreatorInclude<ExtArgs> | null
  /**
   * Filter, which Creator to fetch.
   */
  where: Prisma.CreatorWhereUniqueInput
}

/**
 * Creator findUniqueOrThrow
 */
export type CreatorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Creator
   */
  select?: Prisma.CreatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Creator
   */
  omit?: Prisma.CreatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreatorInclude<ExtArgs> | null
  /**
   * Filter, which Creator to fetch.
   */
  where: Prisma.CreatorWhereUniqueInput
}

/**
 * Creator findFirst
 */
export type CreatorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Creator
   */
  select?: Prisma.CreatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Creator
   */
  omit?: Prisma.CreatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreatorInclude<ExtArgs> | null
  /**
   * Filter, which Creator to fetch.
   */
  where?: Prisma.CreatorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Creators to fetch.
   */
  orderBy?: Prisma.CreatorOrderByWithRelationInput | Prisma.CreatorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Creators.
   */
  cursor?: Prisma.CreatorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Creators from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Creators.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Creators.
   */
  distinct?: Prisma.CreatorScalarFieldEnum | Prisma.CreatorScalarFieldEnum[]
}

/**
 * Creator findFirstOrThrow
 */
export type CreatorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Creator
   */
  select?: Prisma.CreatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Creator
   */
  omit?: Prisma.CreatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreatorInclude<ExtArgs> | null
  /**
   * Filter, which Creator to fetch.
   */
  where?: Prisma.CreatorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Creators to fetch.
   */
  orderBy?: Prisma.CreatorOrderByWithRelationInput | Prisma.CreatorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Creators.
   */
  cursor?: Prisma.CreatorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Creators from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Creators.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Creators.
   */
  distinct?: Prisma.CreatorScalarFieldEnum | Prisma.CreatorScalarFieldEnum[]
}

/**
 * Creator findMany
 */
export type CreatorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Creator
   */
  select?: Prisma.CreatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Creator
   */
  omit?: Prisma.CreatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreatorInclude<ExtArgs> | null
  /**
   * Filter, which Creators to fetch.
   */
  where?: Prisma.CreatorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Creators to fetch.
   */
  orderBy?: Prisma.CreatorOrderByWithRelationInput | Prisma.CreatorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Creators.
   */
  cursor?: Prisma.CreatorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Creators from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Creators.
   */
  skip?: number
  distinct?: Prisma.CreatorScalarFieldEnum | Prisma.CreatorScalarFieldEnum[]
}

/**
 * Creator create
 */
export type CreatorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Creator
   */
  select?: Prisma.CreatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Creator
   */
  omit?: Prisma.CreatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreatorInclude<ExtArgs> | null
  /**
   * The data needed to create a Creator.
   */
  data: Prisma.XOR<Prisma.CreatorCreateInput, Prisma.CreatorUncheckedCreateInput>
}

/**
 * Creator createMany
 */
export type CreatorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Creators.
   */
  data: Prisma.CreatorCreateManyInput | Prisma.CreatorCreateManyInput[]
}

/**
 * Creator createManyAndReturn
 */
export type CreatorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Creator
   */
  select?: Prisma.CreatorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Creator
   */
  omit?: Prisma.CreatorOmit<ExtArgs> | null
  /**
   * The data used to create many Creators.
   */
  data: Prisma.CreatorCreateManyInput | Prisma.CreatorCreateManyInput[]
}

/**
 * Creator update
 */
export type CreatorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Creator
   */
  select?: Prisma.CreatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Creator
   */
  omit?: Prisma.CreatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreatorInclude<ExtArgs> | null
  /**
   * The data needed to update a Creator.
   */
  data: Prisma.XOR<Prisma.CreatorUpdateInput, Prisma.CreatorUncheckedUpdateInput>
  /**
   * Choose, which Creator to update.
   */
  where: Prisma.CreatorWhereUniqueInput
}

/**
 * Creator updateMany
 */
export type CreatorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Creators.
   */
  data: Prisma.XOR<Prisma.CreatorUpdateManyMutationInput, Prisma.CreatorUncheckedUpdateManyInput>
  /**
   * Filter which Creators to update
   */
  where?: Prisma.CreatorWhereInput
  /**
   * Limit how many Creators to update.
   */
  limit?: number
}

/**
 * Creator updateManyAndReturn
 */
export type CreatorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Creator
   */
  select?: Prisma.CreatorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Creator
   */
  omit?: Prisma.CreatorOmit<ExtArgs> | null
  /**
   * The data used to update Creators.
   */
  data: Prisma.XOR<Prisma.CreatorUpdateManyMutationInput, Prisma.CreatorUncheckedUpdateManyInput>
  /**
   * Filter which Creators to update
   */
  where?: Prisma.CreatorWhereInput
  /**
   * Limit how many Creators to update.
   */
  limit?: number
}

/**
 * Creator upsert
 */
export type CreatorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Creator
   */
  select?: Prisma.CreatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Creator
   */
  omit?: Prisma.CreatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreatorInclude<ExtArgs> | null
  /**
   * The filter to search for the Creator to update in case it exists.
   */
  where: Prisma.CreatorWhereUniqueInput
  /**
   * In case the Creator found by the `where` argument doesn't exist, create a new Creator with this data.
   */
  create: Prisma.XOR<Prisma.CreatorCreateInput, Prisma.CreatorUncheckedCreateInput>
  /**
   * In case the Creator was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CreatorUpdateInput, Prisma.CreatorUncheckedUpdateInput>
}

/**
 * Creator delete
 */
export type CreatorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Creator
   */
  select?: Prisma.CreatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Creator
   */
  omit?: Prisma.CreatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreatorInclude<ExtArgs> | null
  /**
   * Filter which Creator to delete.
   */
  where: Prisma.CreatorWhereUniqueInput
}

/**
 * Creator deleteMany
 */
export type CreatorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Creators to delete
   */
  where?: Prisma.CreatorWhereInput
  /**
   * Limit how many Creators to delete.
   */
  limit?: number
}

/**
 * Creator.models
 */
export type Creator$modelsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Model
   */
  select?: Prisma.ModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Model
   */
  omit?: Prisma.ModelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelInclude<ExtArgs> | null
  where?: Prisma.ModelWhereInput
  orderBy?: Prisma.ModelOrderByWithRelationInput | Prisma.ModelOrderByWithRelationInput[]
  cursor?: Prisma.ModelWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ModelScalarFieldEnum | Prisma.ModelScalarFieldEnum[]
}

/**
 * Creator without action
 */
export type CreatorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Creator
   */
  select?: Prisma.CreatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Creator
   */
  omit?: Prisma.CreatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreatorInclude<ExtArgs> | null
}
