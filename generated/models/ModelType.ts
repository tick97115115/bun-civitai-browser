
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ModelType` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ModelType
 * 
 */
export type ModelTypeModel = runtime.Types.Result.DefaultSelection<Prisma.$ModelTypePayload>

export type AggregateModelType = {
  _count: ModelTypeCountAggregateOutputType | null
  _avg: ModelTypeAvgAggregateOutputType | null
  _sum: ModelTypeSumAggregateOutputType | null
  _min: ModelTypeMinAggregateOutputType | null
  _max: ModelTypeMaxAggregateOutputType | null
}

export type ModelTypeAvgAggregateOutputType = {
  id: number | null
}

export type ModelTypeSumAggregateOutputType = {
  id: number | null
}

export type ModelTypeMinAggregateOutputType = {
  id: number | null
  name: string | null
}

export type ModelTypeMaxAggregateOutputType = {
  id: number | null
  name: string | null
}

export type ModelTypeCountAggregateOutputType = {
  id: number
  name: number
  _all: number
}


export type ModelTypeAvgAggregateInputType = {
  id?: true
}

export type ModelTypeSumAggregateInputType = {
  id?: true
}

export type ModelTypeMinAggregateInputType = {
  id?: true
  name?: true
}

export type ModelTypeMaxAggregateInputType = {
  id?: true
  name?: true
}

export type ModelTypeCountAggregateInputType = {
  id?: true
  name?: true
  _all?: true
}

export type ModelTypeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ModelType to aggregate.
   */
  where?: Prisma.ModelTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ModelTypes to fetch.
   */
  orderBy?: Prisma.ModelTypeOrderByWithRelationInput | Prisma.ModelTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ModelTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ModelTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ModelTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ModelTypes
  **/
  _count?: true | ModelTypeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ModelTypeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ModelTypeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ModelTypeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ModelTypeMaxAggregateInputType
}

export type GetModelTypeAggregateType<T extends ModelTypeAggregateArgs> = {
      [P in keyof T & keyof AggregateModelType]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateModelType[P]>
    : Prisma.GetScalarType<T[P], AggregateModelType[P]>
}




export type ModelTypeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ModelTypeWhereInput
  orderBy?: Prisma.ModelTypeOrderByWithAggregationInput | Prisma.ModelTypeOrderByWithAggregationInput[]
  by: Prisma.ModelTypeScalarFieldEnum[] | Prisma.ModelTypeScalarFieldEnum
  having?: Prisma.ModelTypeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ModelTypeCountAggregateInputType | true
  _avg?: ModelTypeAvgAggregateInputType
  _sum?: ModelTypeSumAggregateInputType
  _min?: ModelTypeMinAggregateInputType
  _max?: ModelTypeMaxAggregateInputType
}

export type ModelTypeGroupByOutputType = {
  id: number
  name: string
  _count: ModelTypeCountAggregateOutputType | null
  _avg: ModelTypeAvgAggregateOutputType | null
  _sum: ModelTypeSumAggregateOutputType | null
  _min: ModelTypeMinAggregateOutputType | null
  _max: ModelTypeMaxAggregateOutputType | null
}

type GetModelTypeGroupByPayload<T extends ModelTypeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ModelTypeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ModelTypeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ModelTypeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ModelTypeGroupByOutputType[P]>
      }
    >
  >



export type ModelTypeWhereInput = {
  AND?: Prisma.ModelTypeWhereInput | Prisma.ModelTypeWhereInput[]
  OR?: Prisma.ModelTypeWhereInput[]
  NOT?: Prisma.ModelTypeWhereInput | Prisma.ModelTypeWhereInput[]
  id?: Prisma.IntFilter<"ModelType"> | number
  name?: Prisma.StringFilter<"ModelType"> | string
  models?: Prisma.ModelListRelationFilter
}

export type ModelTypeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  models?: Prisma.ModelOrderByRelationAggregateInput
}

export type ModelTypeWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.ModelTypeWhereInput | Prisma.ModelTypeWhereInput[]
  OR?: Prisma.ModelTypeWhereInput[]
  NOT?: Prisma.ModelTypeWhereInput | Prisma.ModelTypeWhereInput[]
  models?: Prisma.ModelListRelationFilter
}, "id" | "name">

export type ModelTypeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  _count?: Prisma.ModelTypeCountOrderByAggregateInput
  _avg?: Prisma.ModelTypeAvgOrderByAggregateInput
  _max?: Prisma.ModelTypeMaxOrderByAggregateInput
  _min?: Prisma.ModelTypeMinOrderByAggregateInput
  _sum?: Prisma.ModelTypeSumOrderByAggregateInput
}

export type ModelTypeScalarWhereWithAggregatesInput = {
  AND?: Prisma.ModelTypeScalarWhereWithAggregatesInput | Prisma.ModelTypeScalarWhereWithAggregatesInput[]
  OR?: Prisma.ModelTypeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ModelTypeScalarWhereWithAggregatesInput | Prisma.ModelTypeScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ModelType"> | number
  name?: Prisma.StringWithAggregatesFilter<"ModelType"> | string
}

export type ModelTypeCreateInput = {
  name: string
  models?: Prisma.ModelCreateNestedManyWithoutTypeInput
}

export type ModelTypeUncheckedCreateInput = {
  id?: number
  name: string
  models?: Prisma.ModelUncheckedCreateNestedManyWithoutTypeInput
}

export type ModelTypeUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  models?: Prisma.ModelUpdateManyWithoutTypeNestedInput
}

export type ModelTypeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  models?: Prisma.ModelUncheckedUpdateManyWithoutTypeNestedInput
}

export type ModelTypeCreateManyInput = {
  id?: number
  name: string
}

export type ModelTypeUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ModelTypeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ModelTypeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type ModelTypeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ModelTypeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type ModelTypeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type ModelTypeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ModelTypeScalarRelationFilter = {
  is?: Prisma.ModelTypeWhereInput
  isNot?: Prisma.ModelTypeWhereInput
}

export type ModelTypeCreateNestedOneWithoutModelsInput = {
  create?: Prisma.XOR<Prisma.ModelTypeCreateWithoutModelsInput, Prisma.ModelTypeUncheckedCreateWithoutModelsInput>
  connectOrCreate?: Prisma.ModelTypeCreateOrConnectWithoutModelsInput
  connect?: Prisma.ModelTypeWhereUniqueInput
}

export type ModelTypeUpdateOneRequiredWithoutModelsNestedInput = {
  create?: Prisma.XOR<Prisma.ModelTypeCreateWithoutModelsInput, Prisma.ModelTypeUncheckedCreateWithoutModelsInput>
  connectOrCreate?: Prisma.ModelTypeCreateOrConnectWithoutModelsInput
  upsert?: Prisma.ModelTypeUpsertWithoutModelsInput
  connect?: Prisma.ModelTypeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ModelTypeUpdateToOneWithWhereWithoutModelsInput, Prisma.ModelTypeUpdateWithoutModelsInput>, Prisma.ModelTypeUncheckedUpdateWithoutModelsInput>
}

export type ModelTypeCreateWithoutModelsInput = {
  name: string
}

export type ModelTypeUncheckedCreateWithoutModelsInput = {
  id?: number
  name: string
}

export type ModelTypeCreateOrConnectWithoutModelsInput = {
  where: Prisma.ModelTypeWhereUniqueInput
  create: Prisma.XOR<Prisma.ModelTypeCreateWithoutModelsInput, Prisma.ModelTypeUncheckedCreateWithoutModelsInput>
}

export type ModelTypeUpsertWithoutModelsInput = {
  update: Prisma.XOR<Prisma.ModelTypeUpdateWithoutModelsInput, Prisma.ModelTypeUncheckedUpdateWithoutModelsInput>
  create: Prisma.XOR<Prisma.ModelTypeCreateWithoutModelsInput, Prisma.ModelTypeUncheckedCreateWithoutModelsInput>
  where?: Prisma.ModelTypeWhereInput
}

export type ModelTypeUpdateToOneWithWhereWithoutModelsInput = {
  where?: Prisma.ModelTypeWhereInput
  data: Prisma.XOR<Prisma.ModelTypeUpdateWithoutModelsInput, Prisma.ModelTypeUncheckedUpdateWithoutModelsInput>
}

export type ModelTypeUpdateWithoutModelsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ModelTypeUncheckedUpdateWithoutModelsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type ModelTypeCountOutputType
 */

export type ModelTypeCountOutputType = {
  models: number
}

export type ModelTypeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  models?: boolean | ModelTypeCountOutputTypeCountModelsArgs
}

/**
 * ModelTypeCountOutputType without action
 */
export type ModelTypeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelTypeCountOutputType
   */
  select?: Prisma.ModelTypeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ModelTypeCountOutputType without action
 */
export type ModelTypeCountOutputTypeCountModelsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ModelWhereInput
}


export type ModelTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  models?: boolean | Prisma.ModelType$modelsArgs<ExtArgs>
  _count?: boolean | Prisma.ModelTypeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["modelType"]>

export type ModelTypeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["modelType"]>

export type ModelTypeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["modelType"]>

export type ModelTypeSelectScalar = {
  id?: boolean
  name?: boolean
}

export type ModelTypeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name", ExtArgs["result"]["modelType"]>
export type ModelTypeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  models?: boolean | Prisma.ModelType$modelsArgs<ExtArgs>
  _count?: boolean | Prisma.ModelTypeCountOutputTypeDefaultArgs<ExtArgs>
}
export type ModelTypeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ModelTypeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ModelTypePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ModelType"
  objects: {
    models: Prisma.$ModelPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
  }, ExtArgs["result"]["modelType"]>
  composites: {}
}

export type ModelTypeGetPayload<S extends boolean | null | undefined | ModelTypeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ModelTypePayload, S>

export type ModelTypeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ModelTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ModelTypeCountAggregateInputType | true
  }

export interface ModelTypeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ModelType'], meta: { name: 'ModelType' } }
  /**
   * Find zero or one ModelType that matches the filter.
   * @param {ModelTypeFindUniqueArgs} args - Arguments to find a ModelType
   * @example
   * // Get one ModelType
   * const modelType = await prisma.modelType.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ModelTypeFindUniqueArgs>(args: Prisma.SelectSubset<T, ModelTypeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ModelTypeClient<runtime.Types.Result.GetResult<Prisma.$ModelTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ModelType that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ModelTypeFindUniqueOrThrowArgs} args - Arguments to find a ModelType
   * @example
   * // Get one ModelType
   * const modelType = await prisma.modelType.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ModelTypeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ModelTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ModelTypeClient<runtime.Types.Result.GetResult<Prisma.$ModelTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ModelType that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelTypeFindFirstArgs} args - Arguments to find a ModelType
   * @example
   * // Get one ModelType
   * const modelType = await prisma.modelType.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ModelTypeFindFirstArgs>(args?: Prisma.SelectSubset<T, ModelTypeFindFirstArgs<ExtArgs>>): Prisma.Prisma__ModelTypeClient<runtime.Types.Result.GetResult<Prisma.$ModelTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ModelType that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelTypeFindFirstOrThrowArgs} args - Arguments to find a ModelType
   * @example
   * // Get one ModelType
   * const modelType = await prisma.modelType.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ModelTypeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ModelTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ModelTypeClient<runtime.Types.Result.GetResult<Prisma.$ModelTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ModelTypes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelTypeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ModelTypes
   * const modelTypes = await prisma.modelType.findMany()
   * 
   * // Get first 10 ModelTypes
   * const modelTypes = await prisma.modelType.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const modelTypeWithIdOnly = await prisma.modelType.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ModelTypeFindManyArgs>(args?: Prisma.SelectSubset<T, ModelTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ModelTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ModelType.
   * @param {ModelTypeCreateArgs} args - Arguments to create a ModelType.
   * @example
   * // Create one ModelType
   * const ModelType = await prisma.modelType.create({
   *   data: {
   *     // ... data to create a ModelType
   *   }
   * })
   * 
   */
  create<T extends ModelTypeCreateArgs>(args: Prisma.SelectSubset<T, ModelTypeCreateArgs<ExtArgs>>): Prisma.Prisma__ModelTypeClient<runtime.Types.Result.GetResult<Prisma.$ModelTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ModelTypes.
   * @param {ModelTypeCreateManyArgs} args - Arguments to create many ModelTypes.
   * @example
   * // Create many ModelTypes
   * const modelType = await prisma.modelType.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ModelTypeCreateManyArgs>(args?: Prisma.SelectSubset<T, ModelTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ModelTypes and returns the data saved in the database.
   * @param {ModelTypeCreateManyAndReturnArgs} args - Arguments to create many ModelTypes.
   * @example
   * // Create many ModelTypes
   * const modelType = await prisma.modelType.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ModelTypes and only return the `id`
   * const modelTypeWithIdOnly = await prisma.modelType.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ModelTypeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ModelTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ModelTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ModelType.
   * @param {ModelTypeDeleteArgs} args - Arguments to delete one ModelType.
   * @example
   * // Delete one ModelType
   * const ModelType = await prisma.modelType.delete({
   *   where: {
   *     // ... filter to delete one ModelType
   *   }
   * })
   * 
   */
  delete<T extends ModelTypeDeleteArgs>(args: Prisma.SelectSubset<T, ModelTypeDeleteArgs<ExtArgs>>): Prisma.Prisma__ModelTypeClient<runtime.Types.Result.GetResult<Prisma.$ModelTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ModelType.
   * @param {ModelTypeUpdateArgs} args - Arguments to update one ModelType.
   * @example
   * // Update one ModelType
   * const modelType = await prisma.modelType.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ModelTypeUpdateArgs>(args: Prisma.SelectSubset<T, ModelTypeUpdateArgs<ExtArgs>>): Prisma.Prisma__ModelTypeClient<runtime.Types.Result.GetResult<Prisma.$ModelTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ModelTypes.
   * @param {ModelTypeDeleteManyArgs} args - Arguments to filter ModelTypes to delete.
   * @example
   * // Delete a few ModelTypes
   * const { count } = await prisma.modelType.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ModelTypeDeleteManyArgs>(args?: Prisma.SelectSubset<T, ModelTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ModelTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelTypeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ModelTypes
   * const modelType = await prisma.modelType.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ModelTypeUpdateManyArgs>(args: Prisma.SelectSubset<T, ModelTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ModelTypes and returns the data updated in the database.
   * @param {ModelTypeUpdateManyAndReturnArgs} args - Arguments to update many ModelTypes.
   * @example
   * // Update many ModelTypes
   * const modelType = await prisma.modelType.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ModelTypes and only return the `id`
   * const modelTypeWithIdOnly = await prisma.modelType.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ModelTypeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ModelTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ModelTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ModelType.
   * @param {ModelTypeUpsertArgs} args - Arguments to update or create a ModelType.
   * @example
   * // Update or create a ModelType
   * const modelType = await prisma.modelType.upsert({
   *   create: {
   *     // ... data to create a ModelType
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ModelType we want to update
   *   }
   * })
   */
  upsert<T extends ModelTypeUpsertArgs>(args: Prisma.SelectSubset<T, ModelTypeUpsertArgs<ExtArgs>>): Prisma.Prisma__ModelTypeClient<runtime.Types.Result.GetResult<Prisma.$ModelTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ModelTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelTypeCountArgs} args - Arguments to filter ModelTypes to count.
   * @example
   * // Count the number of ModelTypes
   * const count = await prisma.modelType.count({
   *   where: {
   *     // ... the filter for the ModelTypes we want to count
   *   }
   * })
  **/
  count<T extends ModelTypeCountArgs>(
    args?: Prisma.Subset<T, ModelTypeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ModelTypeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ModelType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ModelTypeAggregateArgs>(args: Prisma.Subset<T, ModelTypeAggregateArgs>): Prisma.PrismaPromise<GetModelTypeAggregateType<T>>

  /**
   * Group by ModelType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelTypeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ModelTypeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ModelTypeGroupByArgs['orderBy'] }
      : { orderBy?: ModelTypeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ModelTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetModelTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ModelType model
 */
readonly fields: ModelTypeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ModelType.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ModelTypeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  models<T extends Prisma.ModelType$modelsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ModelType$modelsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ModelType model
 */
export interface ModelTypeFieldRefs {
  readonly id: Prisma.FieldRef<"ModelType", 'Int'>
  readonly name: Prisma.FieldRef<"ModelType", 'String'>
}
    

// Custom InputTypes
/**
 * ModelType findUnique
 */
export type ModelTypeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelType
   */
  select?: Prisma.ModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelType
   */
  omit?: Prisma.ModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelTypeInclude<ExtArgs> | null
  /**
   * Filter, which ModelType to fetch.
   */
  where: Prisma.ModelTypeWhereUniqueInput
}

/**
 * ModelType findUniqueOrThrow
 */
export type ModelTypeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelType
   */
  select?: Prisma.ModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelType
   */
  omit?: Prisma.ModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelTypeInclude<ExtArgs> | null
  /**
   * Filter, which ModelType to fetch.
   */
  where: Prisma.ModelTypeWhereUniqueInput
}

/**
 * ModelType findFirst
 */
export type ModelTypeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelType
   */
  select?: Prisma.ModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelType
   */
  omit?: Prisma.ModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelTypeInclude<ExtArgs> | null
  /**
   * Filter, which ModelType to fetch.
   */
  where?: Prisma.ModelTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ModelTypes to fetch.
   */
  orderBy?: Prisma.ModelTypeOrderByWithRelationInput | Prisma.ModelTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ModelTypes.
   */
  cursor?: Prisma.ModelTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ModelTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ModelTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ModelTypes.
   */
  distinct?: Prisma.ModelTypeScalarFieldEnum | Prisma.ModelTypeScalarFieldEnum[]
}

/**
 * ModelType findFirstOrThrow
 */
export type ModelTypeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelType
   */
  select?: Prisma.ModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelType
   */
  omit?: Prisma.ModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelTypeInclude<ExtArgs> | null
  /**
   * Filter, which ModelType to fetch.
   */
  where?: Prisma.ModelTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ModelTypes to fetch.
   */
  orderBy?: Prisma.ModelTypeOrderByWithRelationInput | Prisma.ModelTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ModelTypes.
   */
  cursor?: Prisma.ModelTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ModelTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ModelTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ModelTypes.
   */
  distinct?: Prisma.ModelTypeScalarFieldEnum | Prisma.ModelTypeScalarFieldEnum[]
}

/**
 * ModelType findMany
 */
export type ModelTypeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelType
   */
  select?: Prisma.ModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelType
   */
  omit?: Prisma.ModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelTypeInclude<ExtArgs> | null
  /**
   * Filter, which ModelTypes to fetch.
   */
  where?: Prisma.ModelTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ModelTypes to fetch.
   */
  orderBy?: Prisma.ModelTypeOrderByWithRelationInput | Prisma.ModelTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ModelTypes.
   */
  cursor?: Prisma.ModelTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ModelTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ModelTypes.
   */
  skip?: number
  distinct?: Prisma.ModelTypeScalarFieldEnum | Prisma.ModelTypeScalarFieldEnum[]
}

/**
 * ModelType create
 */
export type ModelTypeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelType
   */
  select?: Prisma.ModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelType
   */
  omit?: Prisma.ModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelTypeInclude<ExtArgs> | null
  /**
   * The data needed to create a ModelType.
   */
  data: Prisma.XOR<Prisma.ModelTypeCreateInput, Prisma.ModelTypeUncheckedCreateInput>
}

/**
 * ModelType createMany
 */
export type ModelTypeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ModelTypes.
   */
  data: Prisma.ModelTypeCreateManyInput | Prisma.ModelTypeCreateManyInput[]
}

/**
 * ModelType createManyAndReturn
 */
export type ModelTypeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelType
   */
  select?: Prisma.ModelTypeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ModelType
   */
  omit?: Prisma.ModelTypeOmit<ExtArgs> | null
  /**
   * The data used to create many ModelTypes.
   */
  data: Prisma.ModelTypeCreateManyInput | Prisma.ModelTypeCreateManyInput[]
}

/**
 * ModelType update
 */
export type ModelTypeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelType
   */
  select?: Prisma.ModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelType
   */
  omit?: Prisma.ModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelTypeInclude<ExtArgs> | null
  /**
   * The data needed to update a ModelType.
   */
  data: Prisma.XOR<Prisma.ModelTypeUpdateInput, Prisma.ModelTypeUncheckedUpdateInput>
  /**
   * Choose, which ModelType to update.
   */
  where: Prisma.ModelTypeWhereUniqueInput
}

/**
 * ModelType updateMany
 */
export type ModelTypeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ModelTypes.
   */
  data: Prisma.XOR<Prisma.ModelTypeUpdateManyMutationInput, Prisma.ModelTypeUncheckedUpdateManyInput>
  /**
   * Filter which ModelTypes to update
   */
  where?: Prisma.ModelTypeWhereInput
  /**
   * Limit how many ModelTypes to update.
   */
  limit?: number
}

/**
 * ModelType updateManyAndReturn
 */
export type ModelTypeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelType
   */
  select?: Prisma.ModelTypeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ModelType
   */
  omit?: Prisma.ModelTypeOmit<ExtArgs> | null
  /**
   * The data used to update ModelTypes.
   */
  data: Prisma.XOR<Prisma.ModelTypeUpdateManyMutationInput, Prisma.ModelTypeUncheckedUpdateManyInput>
  /**
   * Filter which ModelTypes to update
   */
  where?: Prisma.ModelTypeWhereInput
  /**
   * Limit how many ModelTypes to update.
   */
  limit?: number
}

/**
 * ModelType upsert
 */
export type ModelTypeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelType
   */
  select?: Prisma.ModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelType
   */
  omit?: Prisma.ModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelTypeInclude<ExtArgs> | null
  /**
   * The filter to search for the ModelType to update in case it exists.
   */
  where: Prisma.ModelTypeWhereUniqueInput
  /**
   * In case the ModelType found by the `where` argument doesn't exist, create a new ModelType with this data.
   */
  create: Prisma.XOR<Prisma.ModelTypeCreateInput, Prisma.ModelTypeUncheckedCreateInput>
  /**
   * In case the ModelType was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ModelTypeUpdateInput, Prisma.ModelTypeUncheckedUpdateInput>
}

/**
 * ModelType delete
 */
export type ModelTypeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelType
   */
  select?: Prisma.ModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelType
   */
  omit?: Prisma.ModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelTypeInclude<ExtArgs> | null
  /**
   * Filter which ModelType to delete.
   */
  where: Prisma.ModelTypeWhereUniqueInput
}

/**
 * ModelType deleteMany
 */
export type ModelTypeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ModelTypes to delete
   */
  where?: Prisma.ModelTypeWhereInput
  /**
   * Limit how many ModelTypes to delete.
   */
  limit?: number
}

/**
 * ModelType.models
 */
export type ModelType$modelsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Model
   */
  select?: Prisma.ModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Model
   */
  omit?: Prisma.ModelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelInclude<ExtArgs> | null
  where?: Prisma.ModelWhereInput
  orderBy?: Prisma.ModelOrderByWithRelationInput | Prisma.ModelOrderByWithRelationInput[]
  cursor?: Prisma.ModelWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ModelScalarFieldEnum | Prisma.ModelScalarFieldEnum[]
}

/**
 * ModelType without action
 */
export type ModelTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelType
   */
  select?: Prisma.ModelTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelType
   */
  omit?: Prisma.ModelTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelTypeInclude<ExtArgs> | null
}
