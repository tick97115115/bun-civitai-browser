
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ModelVersionFile` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ModelVersionFile
 * 
 */
export type ModelVersionFileModel = runtime.Types.Result.DefaultSelection<Prisma.$ModelVersionFilePayload>

export type AggregateModelVersionFile = {
  _count: ModelVersionFileCountAggregateOutputType | null
  _avg: ModelVersionFileAvgAggregateOutputType | null
  _sum: ModelVersionFileSumAggregateOutputType | null
  _min: ModelVersionFileMinAggregateOutputType | null
  _max: ModelVersionFileMaxAggregateOutputType | null
}

export type ModelVersionFileAvgAggregateOutputType = {
  id: number | null
  sizeKB: number | null
  modelVersionId: number | null
}

export type ModelVersionFileSumAggregateOutputType = {
  id: number | null
  sizeKB: number | null
  modelVersionId: number | null
}

export type ModelVersionFileMinAggregateOutputType = {
  id: number | null
  sizeKB: number | null
  name: string | null
  type: string | null
  downloadUrl: string | null
  modelVersionId: number | null
}

export type ModelVersionFileMaxAggregateOutputType = {
  id: number | null
  sizeKB: number | null
  name: string | null
  type: string | null
  downloadUrl: string | null
  modelVersionId: number | null
}

export type ModelVersionFileCountAggregateOutputType = {
  id: number
  sizeKB: number
  name: number
  type: number
  downloadUrl: number
  modelVersionId: number
  _all: number
}


export type ModelVersionFileAvgAggregateInputType = {
  id?: true
  sizeKB?: true
  modelVersionId?: true
}

export type ModelVersionFileSumAggregateInputType = {
  id?: true
  sizeKB?: true
  modelVersionId?: true
}

export type ModelVersionFileMinAggregateInputType = {
  id?: true
  sizeKB?: true
  name?: true
  type?: true
  downloadUrl?: true
  modelVersionId?: true
}

export type ModelVersionFileMaxAggregateInputType = {
  id?: true
  sizeKB?: true
  name?: true
  type?: true
  downloadUrl?: true
  modelVersionId?: true
}

export type ModelVersionFileCountAggregateInputType = {
  id?: true
  sizeKB?: true
  name?: true
  type?: true
  downloadUrl?: true
  modelVersionId?: true
  _all?: true
}

export type ModelVersionFileAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ModelVersionFile to aggregate.
   */
  where?: Prisma.ModelVersionFileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ModelVersionFiles to fetch.
   */
  orderBy?: Prisma.ModelVersionFileOrderByWithRelationInput | Prisma.ModelVersionFileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ModelVersionFileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ModelVersionFiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ModelVersionFiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ModelVersionFiles
  **/
  _count?: true | ModelVersionFileCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ModelVersionFileAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ModelVersionFileSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ModelVersionFileMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ModelVersionFileMaxAggregateInputType
}

export type GetModelVersionFileAggregateType<T extends ModelVersionFileAggregateArgs> = {
      [P in keyof T & keyof AggregateModelVersionFile]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateModelVersionFile[P]>
    : Prisma.GetScalarType<T[P], AggregateModelVersionFile[P]>
}




export type ModelVersionFileGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ModelVersionFileWhereInput
  orderBy?: Prisma.ModelVersionFileOrderByWithAggregationInput | Prisma.ModelVersionFileOrderByWithAggregationInput[]
  by: Prisma.ModelVersionFileScalarFieldEnum[] | Prisma.ModelVersionFileScalarFieldEnum
  having?: Prisma.ModelVersionFileScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ModelVersionFileCountAggregateInputType | true
  _avg?: ModelVersionFileAvgAggregateInputType
  _sum?: ModelVersionFileSumAggregateInputType
  _min?: ModelVersionFileMinAggregateInputType
  _max?: ModelVersionFileMaxAggregateInputType
}

export type ModelVersionFileGroupByOutputType = {
  id: number
  sizeKB: number
  name: string
  type: string
  downloadUrl: string
  modelVersionId: number
  _count: ModelVersionFileCountAggregateOutputType | null
  _avg: ModelVersionFileAvgAggregateOutputType | null
  _sum: ModelVersionFileSumAggregateOutputType | null
  _min: ModelVersionFileMinAggregateOutputType | null
  _max: ModelVersionFileMaxAggregateOutputType | null
}

type GetModelVersionFileGroupByPayload<T extends ModelVersionFileGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ModelVersionFileGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ModelVersionFileGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ModelVersionFileGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ModelVersionFileGroupByOutputType[P]>
      }
    >
  >



export type ModelVersionFileWhereInput = {
  AND?: Prisma.ModelVersionFileWhereInput | Prisma.ModelVersionFileWhereInput[]
  OR?: Prisma.ModelVersionFileWhereInput[]
  NOT?: Prisma.ModelVersionFileWhereInput | Prisma.ModelVersionFileWhereInput[]
  id?: Prisma.IntFilter<"ModelVersionFile"> | number
  sizeKB?: Prisma.FloatFilter<"ModelVersionFile"> | number
  name?: Prisma.StringFilter<"ModelVersionFile"> | string
  type?: Prisma.StringFilter<"ModelVersionFile"> | string
  downloadUrl?: Prisma.StringFilter<"ModelVersionFile"> | string
  modelVersionId?: Prisma.IntFilter<"ModelVersionFile"> | number
  modelVersion?: Prisma.XOR<Prisma.ModelVersionScalarRelationFilter, Prisma.ModelVersionWhereInput>
}

export type ModelVersionFileOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  sizeKB?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  downloadUrl?: Prisma.SortOrder
  modelVersionId?: Prisma.SortOrder
  modelVersion?: Prisma.ModelVersionOrderByWithRelationInput
}

export type ModelVersionFileWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ModelVersionFileWhereInput | Prisma.ModelVersionFileWhereInput[]
  OR?: Prisma.ModelVersionFileWhereInput[]
  NOT?: Prisma.ModelVersionFileWhereInput | Prisma.ModelVersionFileWhereInput[]
  sizeKB?: Prisma.FloatFilter<"ModelVersionFile"> | number
  name?: Prisma.StringFilter<"ModelVersionFile"> | string
  type?: Prisma.StringFilter<"ModelVersionFile"> | string
  downloadUrl?: Prisma.StringFilter<"ModelVersionFile"> | string
  modelVersionId?: Prisma.IntFilter<"ModelVersionFile"> | number
  modelVersion?: Prisma.XOR<Prisma.ModelVersionScalarRelationFilter, Prisma.ModelVersionWhereInput>
}, "id">

export type ModelVersionFileOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  sizeKB?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  downloadUrl?: Prisma.SortOrder
  modelVersionId?: Prisma.SortOrder
  _count?: Prisma.ModelVersionFileCountOrderByAggregateInput
  _avg?: Prisma.ModelVersionFileAvgOrderByAggregateInput
  _max?: Prisma.ModelVersionFileMaxOrderByAggregateInput
  _min?: Prisma.ModelVersionFileMinOrderByAggregateInput
  _sum?: Prisma.ModelVersionFileSumOrderByAggregateInput
}

export type ModelVersionFileScalarWhereWithAggregatesInput = {
  AND?: Prisma.ModelVersionFileScalarWhereWithAggregatesInput | Prisma.ModelVersionFileScalarWhereWithAggregatesInput[]
  OR?: Prisma.ModelVersionFileScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ModelVersionFileScalarWhereWithAggregatesInput | Prisma.ModelVersionFileScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ModelVersionFile"> | number
  sizeKB?: Prisma.FloatWithAggregatesFilter<"ModelVersionFile"> | number
  name?: Prisma.StringWithAggregatesFilter<"ModelVersionFile"> | string
  type?: Prisma.StringWithAggregatesFilter<"ModelVersionFile"> | string
  downloadUrl?: Prisma.StringWithAggregatesFilter<"ModelVersionFile"> | string
  modelVersionId?: Prisma.IntWithAggregatesFilter<"ModelVersionFile"> | number
}

export type ModelVersionFileCreateInput = {
  id: number
  sizeKB: number
  name: string
  type: string
  downloadUrl: string
  modelVersion: Prisma.ModelVersionCreateNestedOneWithoutFilesInput
}

export type ModelVersionFileUncheckedCreateInput = {
  id: number
  sizeKB: number
  name: string
  type: string
  downloadUrl: string
  modelVersionId: number
}

export type ModelVersionFileUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sizeKB?: Prisma.FloatFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  downloadUrl?: Prisma.StringFieldUpdateOperationsInput | string
  modelVersion?: Prisma.ModelVersionUpdateOneRequiredWithoutFilesNestedInput
}

export type ModelVersionFileUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sizeKB?: Prisma.FloatFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  downloadUrl?: Prisma.StringFieldUpdateOperationsInput | string
  modelVersionId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ModelVersionFileCreateManyInput = {
  id: number
  sizeKB: number
  name: string
  type: string
  downloadUrl: string
  modelVersionId: number
}

export type ModelVersionFileUpdateManyMutationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sizeKB?: Prisma.FloatFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  downloadUrl?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ModelVersionFileUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sizeKB?: Prisma.FloatFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  downloadUrl?: Prisma.StringFieldUpdateOperationsInput | string
  modelVersionId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ModelVersionFileListRelationFilter = {
  every?: Prisma.ModelVersionFileWhereInput
  some?: Prisma.ModelVersionFileWhereInput
  none?: Prisma.ModelVersionFileWhereInput
}

export type ModelVersionFileOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ModelVersionFileCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sizeKB?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  downloadUrl?: Prisma.SortOrder
  modelVersionId?: Prisma.SortOrder
}

export type ModelVersionFileAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sizeKB?: Prisma.SortOrder
  modelVersionId?: Prisma.SortOrder
}

export type ModelVersionFileMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sizeKB?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  downloadUrl?: Prisma.SortOrder
  modelVersionId?: Prisma.SortOrder
}

export type ModelVersionFileMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sizeKB?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  downloadUrl?: Prisma.SortOrder
  modelVersionId?: Prisma.SortOrder
}

export type ModelVersionFileSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sizeKB?: Prisma.SortOrder
  modelVersionId?: Prisma.SortOrder
}

export type ModelVersionFileCreateNestedManyWithoutModelVersionInput = {
  create?: Prisma.XOR<Prisma.ModelVersionFileCreateWithoutModelVersionInput, Prisma.ModelVersionFileUncheckedCreateWithoutModelVersionInput> | Prisma.ModelVersionFileCreateWithoutModelVersionInput[] | Prisma.ModelVersionFileUncheckedCreateWithoutModelVersionInput[]
  connectOrCreate?: Prisma.ModelVersionFileCreateOrConnectWithoutModelVersionInput | Prisma.ModelVersionFileCreateOrConnectWithoutModelVersionInput[]
  createMany?: Prisma.ModelVersionFileCreateManyModelVersionInputEnvelope
  connect?: Prisma.ModelVersionFileWhereUniqueInput | Prisma.ModelVersionFileWhereUniqueInput[]
}

export type ModelVersionFileUncheckedCreateNestedManyWithoutModelVersionInput = {
  create?: Prisma.XOR<Prisma.ModelVersionFileCreateWithoutModelVersionInput, Prisma.ModelVersionFileUncheckedCreateWithoutModelVersionInput> | Prisma.ModelVersionFileCreateWithoutModelVersionInput[] | Prisma.ModelVersionFileUncheckedCreateWithoutModelVersionInput[]
  connectOrCreate?: Prisma.ModelVersionFileCreateOrConnectWithoutModelVersionInput | Prisma.ModelVersionFileCreateOrConnectWithoutModelVersionInput[]
  createMany?: Prisma.ModelVersionFileCreateManyModelVersionInputEnvelope
  connect?: Prisma.ModelVersionFileWhereUniqueInput | Prisma.ModelVersionFileWhereUniqueInput[]
}

export type ModelVersionFileUpdateManyWithoutModelVersionNestedInput = {
  create?: Prisma.XOR<Prisma.ModelVersionFileCreateWithoutModelVersionInput, Prisma.ModelVersionFileUncheckedCreateWithoutModelVersionInput> | Prisma.ModelVersionFileCreateWithoutModelVersionInput[] | Prisma.ModelVersionFileUncheckedCreateWithoutModelVersionInput[]
  connectOrCreate?: Prisma.ModelVersionFileCreateOrConnectWithoutModelVersionInput | Prisma.ModelVersionFileCreateOrConnectWithoutModelVersionInput[]
  upsert?: Prisma.ModelVersionFileUpsertWithWhereUniqueWithoutModelVersionInput | Prisma.ModelVersionFileUpsertWithWhereUniqueWithoutModelVersionInput[]
  createMany?: Prisma.ModelVersionFileCreateManyModelVersionInputEnvelope
  set?: Prisma.ModelVersionFileWhereUniqueInput | Prisma.ModelVersionFileWhereUniqueInput[]
  disconnect?: Prisma.ModelVersionFileWhereUniqueInput | Prisma.ModelVersionFileWhereUniqueInput[]
  delete?: Prisma.ModelVersionFileWhereUniqueInput | Prisma.ModelVersionFileWhereUniqueInput[]
  connect?: Prisma.ModelVersionFileWhereUniqueInput | Prisma.ModelVersionFileWhereUniqueInput[]
  update?: Prisma.ModelVersionFileUpdateWithWhereUniqueWithoutModelVersionInput | Prisma.ModelVersionFileUpdateWithWhereUniqueWithoutModelVersionInput[]
  updateMany?: Prisma.ModelVersionFileUpdateManyWithWhereWithoutModelVersionInput | Prisma.ModelVersionFileUpdateManyWithWhereWithoutModelVersionInput[]
  deleteMany?: Prisma.ModelVersionFileScalarWhereInput | Prisma.ModelVersionFileScalarWhereInput[]
}

export type ModelVersionFileUncheckedUpdateManyWithoutModelVersionNestedInput = {
  create?: Prisma.XOR<Prisma.ModelVersionFileCreateWithoutModelVersionInput, Prisma.ModelVersionFileUncheckedCreateWithoutModelVersionInput> | Prisma.ModelVersionFileCreateWithoutModelVersionInput[] | Prisma.ModelVersionFileUncheckedCreateWithoutModelVersionInput[]
  connectOrCreate?: Prisma.ModelVersionFileCreateOrConnectWithoutModelVersionInput | Prisma.ModelVersionFileCreateOrConnectWithoutModelVersionInput[]
  upsert?: Prisma.ModelVersionFileUpsertWithWhereUniqueWithoutModelVersionInput | Prisma.ModelVersionFileUpsertWithWhereUniqueWithoutModelVersionInput[]
  createMany?: Prisma.ModelVersionFileCreateManyModelVersionInputEnvelope
  set?: Prisma.ModelVersionFileWhereUniqueInput | Prisma.ModelVersionFileWhereUniqueInput[]
  disconnect?: Prisma.ModelVersionFileWhereUniqueInput | Prisma.ModelVersionFileWhereUniqueInput[]
  delete?: Prisma.ModelVersionFileWhereUniqueInput | Prisma.ModelVersionFileWhereUniqueInput[]
  connect?: Prisma.ModelVersionFileWhereUniqueInput | Prisma.ModelVersionFileWhereUniqueInput[]
  update?: Prisma.ModelVersionFileUpdateWithWhereUniqueWithoutModelVersionInput | Prisma.ModelVersionFileUpdateWithWhereUniqueWithoutModelVersionInput[]
  updateMany?: Prisma.ModelVersionFileUpdateManyWithWhereWithoutModelVersionInput | Prisma.ModelVersionFileUpdateManyWithWhereWithoutModelVersionInput[]
  deleteMany?: Prisma.ModelVersionFileScalarWhereInput | Prisma.ModelVersionFileScalarWhereInput[]
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type ModelVersionFileCreateWithoutModelVersionInput = {
  id: number
  sizeKB: number
  name: string
  type: string
  downloadUrl: string
}

export type ModelVersionFileUncheckedCreateWithoutModelVersionInput = {
  id: number
  sizeKB: number
  name: string
  type: string
  downloadUrl: string
}

export type ModelVersionFileCreateOrConnectWithoutModelVersionInput = {
  where: Prisma.ModelVersionFileWhereUniqueInput
  create: Prisma.XOR<Prisma.ModelVersionFileCreateWithoutModelVersionInput, Prisma.ModelVersionFileUncheckedCreateWithoutModelVersionInput>
}

export type ModelVersionFileCreateManyModelVersionInputEnvelope = {
  data: Prisma.ModelVersionFileCreateManyModelVersionInput | Prisma.ModelVersionFileCreateManyModelVersionInput[]
}

export type ModelVersionFileUpsertWithWhereUniqueWithoutModelVersionInput = {
  where: Prisma.ModelVersionFileWhereUniqueInput
  update: Prisma.XOR<Prisma.ModelVersionFileUpdateWithoutModelVersionInput, Prisma.ModelVersionFileUncheckedUpdateWithoutModelVersionInput>
  create: Prisma.XOR<Prisma.ModelVersionFileCreateWithoutModelVersionInput, Prisma.ModelVersionFileUncheckedCreateWithoutModelVersionInput>
}

export type ModelVersionFileUpdateWithWhereUniqueWithoutModelVersionInput = {
  where: Prisma.ModelVersionFileWhereUniqueInput
  data: Prisma.XOR<Prisma.ModelVersionFileUpdateWithoutModelVersionInput, Prisma.ModelVersionFileUncheckedUpdateWithoutModelVersionInput>
}

export type ModelVersionFileUpdateManyWithWhereWithoutModelVersionInput = {
  where: Prisma.ModelVersionFileScalarWhereInput
  data: Prisma.XOR<Prisma.ModelVersionFileUpdateManyMutationInput, Prisma.ModelVersionFileUncheckedUpdateManyWithoutModelVersionInput>
}

export type ModelVersionFileScalarWhereInput = {
  AND?: Prisma.ModelVersionFileScalarWhereInput | Prisma.ModelVersionFileScalarWhereInput[]
  OR?: Prisma.ModelVersionFileScalarWhereInput[]
  NOT?: Prisma.ModelVersionFileScalarWhereInput | Prisma.ModelVersionFileScalarWhereInput[]
  id?: Prisma.IntFilter<"ModelVersionFile"> | number
  sizeKB?: Prisma.FloatFilter<"ModelVersionFile"> | number
  name?: Prisma.StringFilter<"ModelVersionFile"> | string
  type?: Prisma.StringFilter<"ModelVersionFile"> | string
  downloadUrl?: Prisma.StringFilter<"ModelVersionFile"> | string
  modelVersionId?: Prisma.IntFilter<"ModelVersionFile"> | number
}

export type ModelVersionFileCreateManyModelVersionInput = {
  id: number
  sizeKB: number
  name: string
  type: string
  downloadUrl: string
}

export type ModelVersionFileUpdateWithoutModelVersionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sizeKB?: Prisma.FloatFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  downloadUrl?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ModelVersionFileUncheckedUpdateWithoutModelVersionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sizeKB?: Prisma.FloatFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  downloadUrl?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ModelVersionFileUncheckedUpdateManyWithoutModelVersionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sizeKB?: Prisma.FloatFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  downloadUrl?: Prisma.StringFieldUpdateOperationsInput | string
}



export type ModelVersionFileSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sizeKB?: boolean
  name?: boolean
  type?: boolean
  downloadUrl?: boolean
  modelVersionId?: boolean
  modelVersion?: boolean | Prisma.ModelVersionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["modelVersionFile"]>

export type ModelVersionFileSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sizeKB?: boolean
  name?: boolean
  type?: boolean
  downloadUrl?: boolean
  modelVersionId?: boolean
  modelVersion?: boolean | Prisma.ModelVersionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["modelVersionFile"]>

export type ModelVersionFileSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sizeKB?: boolean
  name?: boolean
  type?: boolean
  downloadUrl?: boolean
  modelVersionId?: boolean
  modelVersion?: boolean | Prisma.ModelVersionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["modelVersionFile"]>

export type ModelVersionFileSelectScalar = {
  id?: boolean
  sizeKB?: boolean
  name?: boolean
  type?: boolean
  downloadUrl?: boolean
  modelVersionId?: boolean
}

export type ModelVersionFileOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "sizeKB" | "name" | "type" | "downloadUrl" | "modelVersionId", ExtArgs["result"]["modelVersionFile"]>
export type ModelVersionFileInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  modelVersion?: boolean | Prisma.ModelVersionDefaultArgs<ExtArgs>
}
export type ModelVersionFileIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  modelVersion?: boolean | Prisma.ModelVersionDefaultArgs<ExtArgs>
}
export type ModelVersionFileIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  modelVersion?: boolean | Prisma.ModelVersionDefaultArgs<ExtArgs>
}

export type $ModelVersionFilePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ModelVersionFile"
  objects: {
    modelVersion: Prisma.$ModelVersionPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    sizeKB: number
    name: string
    type: string
    downloadUrl: string
    modelVersionId: number
  }, ExtArgs["result"]["modelVersionFile"]>
  composites: {}
}

export type ModelVersionFileGetPayload<S extends boolean | null | undefined | ModelVersionFileDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ModelVersionFilePayload, S>

export type ModelVersionFileCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ModelVersionFileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ModelVersionFileCountAggregateInputType | true
  }

export interface ModelVersionFileDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ModelVersionFile'], meta: { name: 'ModelVersionFile' } }
  /**
   * Find zero or one ModelVersionFile that matches the filter.
   * @param {ModelVersionFileFindUniqueArgs} args - Arguments to find a ModelVersionFile
   * @example
   * // Get one ModelVersionFile
   * const modelVersionFile = await prisma.modelVersionFile.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ModelVersionFileFindUniqueArgs>(args: Prisma.SelectSubset<T, ModelVersionFileFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ModelVersionFileClient<runtime.Types.Result.GetResult<Prisma.$ModelVersionFilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ModelVersionFile that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ModelVersionFileFindUniqueOrThrowArgs} args - Arguments to find a ModelVersionFile
   * @example
   * // Get one ModelVersionFile
   * const modelVersionFile = await prisma.modelVersionFile.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ModelVersionFileFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ModelVersionFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ModelVersionFileClient<runtime.Types.Result.GetResult<Prisma.$ModelVersionFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ModelVersionFile that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelVersionFileFindFirstArgs} args - Arguments to find a ModelVersionFile
   * @example
   * // Get one ModelVersionFile
   * const modelVersionFile = await prisma.modelVersionFile.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ModelVersionFileFindFirstArgs>(args?: Prisma.SelectSubset<T, ModelVersionFileFindFirstArgs<ExtArgs>>): Prisma.Prisma__ModelVersionFileClient<runtime.Types.Result.GetResult<Prisma.$ModelVersionFilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ModelVersionFile that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelVersionFileFindFirstOrThrowArgs} args - Arguments to find a ModelVersionFile
   * @example
   * // Get one ModelVersionFile
   * const modelVersionFile = await prisma.modelVersionFile.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ModelVersionFileFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ModelVersionFileFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ModelVersionFileClient<runtime.Types.Result.GetResult<Prisma.$ModelVersionFilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ModelVersionFiles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelVersionFileFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ModelVersionFiles
   * const modelVersionFiles = await prisma.modelVersionFile.findMany()
   * 
   * // Get first 10 ModelVersionFiles
   * const modelVersionFiles = await prisma.modelVersionFile.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const modelVersionFileWithIdOnly = await prisma.modelVersionFile.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ModelVersionFileFindManyArgs>(args?: Prisma.SelectSubset<T, ModelVersionFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ModelVersionFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ModelVersionFile.
   * @param {ModelVersionFileCreateArgs} args - Arguments to create a ModelVersionFile.
   * @example
   * // Create one ModelVersionFile
   * const ModelVersionFile = await prisma.modelVersionFile.create({
   *   data: {
   *     // ... data to create a ModelVersionFile
   *   }
   * })
   * 
   */
  create<T extends ModelVersionFileCreateArgs>(args: Prisma.SelectSubset<T, ModelVersionFileCreateArgs<ExtArgs>>): Prisma.Prisma__ModelVersionFileClient<runtime.Types.Result.GetResult<Prisma.$ModelVersionFilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ModelVersionFiles.
   * @param {ModelVersionFileCreateManyArgs} args - Arguments to create many ModelVersionFiles.
   * @example
   * // Create many ModelVersionFiles
   * const modelVersionFile = await prisma.modelVersionFile.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ModelVersionFileCreateManyArgs>(args?: Prisma.SelectSubset<T, ModelVersionFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ModelVersionFiles and returns the data saved in the database.
   * @param {ModelVersionFileCreateManyAndReturnArgs} args - Arguments to create many ModelVersionFiles.
   * @example
   * // Create many ModelVersionFiles
   * const modelVersionFile = await prisma.modelVersionFile.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ModelVersionFiles and only return the `id`
   * const modelVersionFileWithIdOnly = await prisma.modelVersionFile.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ModelVersionFileCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ModelVersionFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ModelVersionFilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ModelVersionFile.
   * @param {ModelVersionFileDeleteArgs} args - Arguments to delete one ModelVersionFile.
   * @example
   * // Delete one ModelVersionFile
   * const ModelVersionFile = await prisma.modelVersionFile.delete({
   *   where: {
   *     // ... filter to delete one ModelVersionFile
   *   }
   * })
   * 
   */
  delete<T extends ModelVersionFileDeleteArgs>(args: Prisma.SelectSubset<T, ModelVersionFileDeleteArgs<ExtArgs>>): Prisma.Prisma__ModelVersionFileClient<runtime.Types.Result.GetResult<Prisma.$ModelVersionFilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ModelVersionFile.
   * @param {ModelVersionFileUpdateArgs} args - Arguments to update one ModelVersionFile.
   * @example
   * // Update one ModelVersionFile
   * const modelVersionFile = await prisma.modelVersionFile.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ModelVersionFileUpdateArgs>(args: Prisma.SelectSubset<T, ModelVersionFileUpdateArgs<ExtArgs>>): Prisma.Prisma__ModelVersionFileClient<runtime.Types.Result.GetResult<Prisma.$ModelVersionFilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ModelVersionFiles.
   * @param {ModelVersionFileDeleteManyArgs} args - Arguments to filter ModelVersionFiles to delete.
   * @example
   * // Delete a few ModelVersionFiles
   * const { count } = await prisma.modelVersionFile.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ModelVersionFileDeleteManyArgs>(args?: Prisma.SelectSubset<T, ModelVersionFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ModelVersionFiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelVersionFileUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ModelVersionFiles
   * const modelVersionFile = await prisma.modelVersionFile.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ModelVersionFileUpdateManyArgs>(args: Prisma.SelectSubset<T, ModelVersionFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ModelVersionFiles and returns the data updated in the database.
   * @param {ModelVersionFileUpdateManyAndReturnArgs} args - Arguments to update many ModelVersionFiles.
   * @example
   * // Update many ModelVersionFiles
   * const modelVersionFile = await prisma.modelVersionFile.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ModelVersionFiles and only return the `id`
   * const modelVersionFileWithIdOnly = await prisma.modelVersionFile.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ModelVersionFileUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ModelVersionFileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ModelVersionFilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ModelVersionFile.
   * @param {ModelVersionFileUpsertArgs} args - Arguments to update or create a ModelVersionFile.
   * @example
   * // Update or create a ModelVersionFile
   * const modelVersionFile = await prisma.modelVersionFile.upsert({
   *   create: {
   *     // ... data to create a ModelVersionFile
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ModelVersionFile we want to update
   *   }
   * })
   */
  upsert<T extends ModelVersionFileUpsertArgs>(args: Prisma.SelectSubset<T, ModelVersionFileUpsertArgs<ExtArgs>>): Prisma.Prisma__ModelVersionFileClient<runtime.Types.Result.GetResult<Prisma.$ModelVersionFilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ModelVersionFiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelVersionFileCountArgs} args - Arguments to filter ModelVersionFiles to count.
   * @example
   * // Count the number of ModelVersionFiles
   * const count = await prisma.modelVersionFile.count({
   *   where: {
   *     // ... the filter for the ModelVersionFiles we want to count
   *   }
   * })
  **/
  count<T extends ModelVersionFileCountArgs>(
    args?: Prisma.Subset<T, ModelVersionFileCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ModelVersionFileCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ModelVersionFile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelVersionFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ModelVersionFileAggregateArgs>(args: Prisma.Subset<T, ModelVersionFileAggregateArgs>): Prisma.PrismaPromise<GetModelVersionFileAggregateType<T>>

  /**
   * Group by ModelVersionFile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelVersionFileGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ModelVersionFileGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ModelVersionFileGroupByArgs['orderBy'] }
      : { orderBy?: ModelVersionFileGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ModelVersionFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetModelVersionFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ModelVersionFile model
 */
readonly fields: ModelVersionFileFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ModelVersionFile.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ModelVersionFileClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  modelVersion<T extends Prisma.ModelVersionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ModelVersionDefaultArgs<ExtArgs>>): Prisma.Prisma__ModelVersionClient<runtime.Types.Result.GetResult<Prisma.$ModelVersionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ModelVersionFile model
 */
export interface ModelVersionFileFieldRefs {
  readonly id: Prisma.FieldRef<"ModelVersionFile", 'Int'>
  readonly sizeKB: Prisma.FieldRef<"ModelVersionFile", 'Float'>
  readonly name: Prisma.FieldRef<"ModelVersionFile", 'String'>
  readonly type: Prisma.FieldRef<"ModelVersionFile", 'String'>
  readonly downloadUrl: Prisma.FieldRef<"ModelVersionFile", 'String'>
  readonly modelVersionId: Prisma.FieldRef<"ModelVersionFile", 'Int'>
}
    

// Custom InputTypes
/**
 * ModelVersionFile findUnique
 */
export type ModelVersionFileFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionFile
   */
  select?: Prisma.ModelVersionFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionFile
   */
  omit?: Prisma.ModelVersionFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionFileInclude<ExtArgs> | null
  /**
   * Filter, which ModelVersionFile to fetch.
   */
  where: Prisma.ModelVersionFileWhereUniqueInput
}

/**
 * ModelVersionFile findUniqueOrThrow
 */
export type ModelVersionFileFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionFile
   */
  select?: Prisma.ModelVersionFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionFile
   */
  omit?: Prisma.ModelVersionFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionFileInclude<ExtArgs> | null
  /**
   * Filter, which ModelVersionFile to fetch.
   */
  where: Prisma.ModelVersionFileWhereUniqueInput
}

/**
 * ModelVersionFile findFirst
 */
export type ModelVersionFileFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionFile
   */
  select?: Prisma.ModelVersionFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionFile
   */
  omit?: Prisma.ModelVersionFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionFileInclude<ExtArgs> | null
  /**
   * Filter, which ModelVersionFile to fetch.
   */
  where?: Prisma.ModelVersionFileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ModelVersionFiles to fetch.
   */
  orderBy?: Prisma.ModelVersionFileOrderByWithRelationInput | Prisma.ModelVersionFileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ModelVersionFiles.
   */
  cursor?: Prisma.ModelVersionFileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ModelVersionFiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ModelVersionFiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ModelVersionFiles.
   */
  distinct?: Prisma.ModelVersionFileScalarFieldEnum | Prisma.ModelVersionFileScalarFieldEnum[]
}

/**
 * ModelVersionFile findFirstOrThrow
 */
export type ModelVersionFileFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionFile
   */
  select?: Prisma.ModelVersionFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionFile
   */
  omit?: Prisma.ModelVersionFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionFileInclude<ExtArgs> | null
  /**
   * Filter, which ModelVersionFile to fetch.
   */
  where?: Prisma.ModelVersionFileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ModelVersionFiles to fetch.
   */
  orderBy?: Prisma.ModelVersionFileOrderByWithRelationInput | Prisma.ModelVersionFileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ModelVersionFiles.
   */
  cursor?: Prisma.ModelVersionFileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ModelVersionFiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ModelVersionFiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ModelVersionFiles.
   */
  distinct?: Prisma.ModelVersionFileScalarFieldEnum | Prisma.ModelVersionFileScalarFieldEnum[]
}

/**
 * ModelVersionFile findMany
 */
export type ModelVersionFileFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionFile
   */
  select?: Prisma.ModelVersionFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionFile
   */
  omit?: Prisma.ModelVersionFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionFileInclude<ExtArgs> | null
  /**
   * Filter, which ModelVersionFiles to fetch.
   */
  where?: Prisma.ModelVersionFileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ModelVersionFiles to fetch.
   */
  orderBy?: Prisma.ModelVersionFileOrderByWithRelationInput | Prisma.ModelVersionFileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ModelVersionFiles.
   */
  cursor?: Prisma.ModelVersionFileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ModelVersionFiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ModelVersionFiles.
   */
  skip?: number
  distinct?: Prisma.ModelVersionFileScalarFieldEnum | Prisma.ModelVersionFileScalarFieldEnum[]
}

/**
 * ModelVersionFile create
 */
export type ModelVersionFileCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionFile
   */
  select?: Prisma.ModelVersionFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionFile
   */
  omit?: Prisma.ModelVersionFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionFileInclude<ExtArgs> | null
  /**
   * The data needed to create a ModelVersionFile.
   */
  data: Prisma.XOR<Prisma.ModelVersionFileCreateInput, Prisma.ModelVersionFileUncheckedCreateInput>
}

/**
 * ModelVersionFile createMany
 */
export type ModelVersionFileCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ModelVersionFiles.
   */
  data: Prisma.ModelVersionFileCreateManyInput | Prisma.ModelVersionFileCreateManyInput[]
}

/**
 * ModelVersionFile createManyAndReturn
 */
export type ModelVersionFileCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionFile
   */
  select?: Prisma.ModelVersionFileSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionFile
   */
  omit?: Prisma.ModelVersionFileOmit<ExtArgs> | null
  /**
   * The data used to create many ModelVersionFiles.
   */
  data: Prisma.ModelVersionFileCreateManyInput | Prisma.ModelVersionFileCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionFileIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ModelVersionFile update
 */
export type ModelVersionFileUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionFile
   */
  select?: Prisma.ModelVersionFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionFile
   */
  omit?: Prisma.ModelVersionFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionFileInclude<ExtArgs> | null
  /**
   * The data needed to update a ModelVersionFile.
   */
  data: Prisma.XOR<Prisma.ModelVersionFileUpdateInput, Prisma.ModelVersionFileUncheckedUpdateInput>
  /**
   * Choose, which ModelVersionFile to update.
   */
  where: Prisma.ModelVersionFileWhereUniqueInput
}

/**
 * ModelVersionFile updateMany
 */
export type ModelVersionFileUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ModelVersionFiles.
   */
  data: Prisma.XOR<Prisma.ModelVersionFileUpdateManyMutationInput, Prisma.ModelVersionFileUncheckedUpdateManyInput>
  /**
   * Filter which ModelVersionFiles to update
   */
  where?: Prisma.ModelVersionFileWhereInput
  /**
   * Limit how many ModelVersionFiles to update.
   */
  limit?: number
}

/**
 * ModelVersionFile updateManyAndReturn
 */
export type ModelVersionFileUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionFile
   */
  select?: Prisma.ModelVersionFileSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionFile
   */
  omit?: Prisma.ModelVersionFileOmit<ExtArgs> | null
  /**
   * The data used to update ModelVersionFiles.
   */
  data: Prisma.XOR<Prisma.ModelVersionFileUpdateManyMutationInput, Prisma.ModelVersionFileUncheckedUpdateManyInput>
  /**
   * Filter which ModelVersionFiles to update
   */
  where?: Prisma.ModelVersionFileWhereInput
  /**
   * Limit how many ModelVersionFiles to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionFileIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ModelVersionFile upsert
 */
export type ModelVersionFileUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionFile
   */
  select?: Prisma.ModelVersionFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionFile
   */
  omit?: Prisma.ModelVersionFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionFileInclude<ExtArgs> | null
  /**
   * The filter to search for the ModelVersionFile to update in case it exists.
   */
  where: Prisma.ModelVersionFileWhereUniqueInput
  /**
   * In case the ModelVersionFile found by the `where` argument doesn't exist, create a new ModelVersionFile with this data.
   */
  create: Prisma.XOR<Prisma.ModelVersionFileCreateInput, Prisma.ModelVersionFileUncheckedCreateInput>
  /**
   * In case the ModelVersionFile was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ModelVersionFileUpdateInput, Prisma.ModelVersionFileUncheckedUpdateInput>
}

/**
 * ModelVersionFile delete
 */
export type ModelVersionFileDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionFile
   */
  select?: Prisma.ModelVersionFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionFile
   */
  omit?: Prisma.ModelVersionFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionFileInclude<ExtArgs> | null
  /**
   * Filter which ModelVersionFile to delete.
   */
  where: Prisma.ModelVersionFileWhereUniqueInput
}

/**
 * ModelVersionFile deleteMany
 */
export type ModelVersionFileDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ModelVersionFiles to delete
   */
  where?: Prisma.ModelVersionFileWhereInput
  /**
   * Limit how many ModelVersionFiles to delete.
   */
  limit?: number
}

/**
 * ModelVersionFile without action
 */
export type ModelVersionFileDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionFile
   */
  select?: Prisma.ModelVersionFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionFile
   */
  omit?: Prisma.ModelVersionFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionFileInclude<ExtArgs> | null
}
