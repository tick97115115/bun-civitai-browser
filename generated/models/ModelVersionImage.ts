
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ModelVersionImage` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ModelVersionImage
 * 
 */
export type ModelVersionImageModel = runtime.Types.Result.DefaultSelection<Prisma.$ModelVersionImagePayload>

export type AggregateModelVersionImage = {
  _count: ModelVersionImageCountAggregateOutputType | null
  _avg: ModelVersionImageAvgAggregateOutputType | null
  _sum: ModelVersionImageSumAggregateOutputType | null
  _min: ModelVersionImageMinAggregateOutputType | null
  _max: ModelVersionImageMaxAggregateOutputType | null
}

export type ModelVersionImageAvgAggregateOutputType = {
  id: number | null
  nsfwLevel: number | null
  width: number | null
  height: number | null
  modelVersionId: number | null
}

export type ModelVersionImageSumAggregateOutputType = {
  id: number | null
  nsfwLevel: number | null
  width: number | null
  height: number | null
  modelVersionId: number | null
}

export type ModelVersionImageMinAggregateOutputType = {
  id: number | null
  url: string | null
  nsfwLevel: number | null
  width: number | null
  height: number | null
  hash: string | null
  type: string | null
  modelVersionId: number | null
}

export type ModelVersionImageMaxAggregateOutputType = {
  id: number | null
  url: string | null
  nsfwLevel: number | null
  width: number | null
  height: number | null
  hash: string | null
  type: string | null
  modelVersionId: number | null
}

export type ModelVersionImageCountAggregateOutputType = {
  id: number
  url: number
  nsfwLevel: number
  width: number
  height: number
  hash: number
  type: number
  modelVersionId: number
  _all: number
}


export type ModelVersionImageAvgAggregateInputType = {
  id?: true
  nsfwLevel?: true
  width?: true
  height?: true
  modelVersionId?: true
}

export type ModelVersionImageSumAggregateInputType = {
  id?: true
  nsfwLevel?: true
  width?: true
  height?: true
  modelVersionId?: true
}

export type ModelVersionImageMinAggregateInputType = {
  id?: true
  url?: true
  nsfwLevel?: true
  width?: true
  height?: true
  hash?: true
  type?: true
  modelVersionId?: true
}

export type ModelVersionImageMaxAggregateInputType = {
  id?: true
  url?: true
  nsfwLevel?: true
  width?: true
  height?: true
  hash?: true
  type?: true
  modelVersionId?: true
}

export type ModelVersionImageCountAggregateInputType = {
  id?: true
  url?: true
  nsfwLevel?: true
  width?: true
  height?: true
  hash?: true
  type?: true
  modelVersionId?: true
  _all?: true
}

export type ModelVersionImageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ModelVersionImage to aggregate.
   */
  where?: Prisma.ModelVersionImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ModelVersionImages to fetch.
   */
  orderBy?: Prisma.ModelVersionImageOrderByWithRelationInput | Prisma.ModelVersionImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ModelVersionImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ModelVersionImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ModelVersionImages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ModelVersionImages
  **/
  _count?: true | ModelVersionImageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ModelVersionImageAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ModelVersionImageSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ModelVersionImageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ModelVersionImageMaxAggregateInputType
}

export type GetModelVersionImageAggregateType<T extends ModelVersionImageAggregateArgs> = {
      [P in keyof T & keyof AggregateModelVersionImage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateModelVersionImage[P]>
    : Prisma.GetScalarType<T[P], AggregateModelVersionImage[P]>
}




export type ModelVersionImageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ModelVersionImageWhereInput
  orderBy?: Prisma.ModelVersionImageOrderByWithAggregationInput | Prisma.ModelVersionImageOrderByWithAggregationInput[]
  by: Prisma.ModelVersionImageScalarFieldEnum[] | Prisma.ModelVersionImageScalarFieldEnum
  having?: Prisma.ModelVersionImageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ModelVersionImageCountAggregateInputType | true
  _avg?: ModelVersionImageAvgAggregateInputType
  _sum?: ModelVersionImageSumAggregateInputType
  _min?: ModelVersionImageMinAggregateInputType
  _max?: ModelVersionImageMaxAggregateInputType
}

export type ModelVersionImageGroupByOutputType = {
  id: number
  url: string
  nsfwLevel: number
  width: number
  height: number
  hash: string
  type: string
  modelVersionId: number
  _count: ModelVersionImageCountAggregateOutputType | null
  _avg: ModelVersionImageAvgAggregateOutputType | null
  _sum: ModelVersionImageSumAggregateOutputType | null
  _min: ModelVersionImageMinAggregateOutputType | null
  _max: ModelVersionImageMaxAggregateOutputType | null
}

type GetModelVersionImageGroupByPayload<T extends ModelVersionImageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ModelVersionImageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ModelVersionImageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ModelVersionImageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ModelVersionImageGroupByOutputType[P]>
      }
    >
  >



export type ModelVersionImageWhereInput = {
  AND?: Prisma.ModelVersionImageWhereInput | Prisma.ModelVersionImageWhereInput[]
  OR?: Prisma.ModelVersionImageWhereInput[]
  NOT?: Prisma.ModelVersionImageWhereInput | Prisma.ModelVersionImageWhereInput[]
  id?: Prisma.IntFilter<"ModelVersionImage"> | number
  url?: Prisma.StringFilter<"ModelVersionImage"> | string
  nsfwLevel?: Prisma.IntFilter<"ModelVersionImage"> | number
  width?: Prisma.IntFilter<"ModelVersionImage"> | number
  height?: Prisma.IntFilter<"ModelVersionImage"> | number
  hash?: Prisma.StringFilter<"ModelVersionImage"> | string
  type?: Prisma.StringFilter<"ModelVersionImage"> | string
  modelVersionId?: Prisma.IntFilter<"ModelVersionImage"> | number
  modelVersion?: Prisma.XOR<Prisma.ModelVersionScalarRelationFilter, Prisma.ModelVersionWhereInput>
}

export type ModelVersionImageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  url?: Prisma.SortOrder
  nsfwLevel?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  hash?: Prisma.SortOrder
  type?: Prisma.SortOrder
  modelVersionId?: Prisma.SortOrder
  modelVersion?: Prisma.ModelVersionOrderByWithRelationInput
}

export type ModelVersionImageWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ModelVersionImageWhereInput | Prisma.ModelVersionImageWhereInput[]
  OR?: Prisma.ModelVersionImageWhereInput[]
  NOT?: Prisma.ModelVersionImageWhereInput | Prisma.ModelVersionImageWhereInput[]
  url?: Prisma.StringFilter<"ModelVersionImage"> | string
  nsfwLevel?: Prisma.IntFilter<"ModelVersionImage"> | number
  width?: Prisma.IntFilter<"ModelVersionImage"> | number
  height?: Prisma.IntFilter<"ModelVersionImage"> | number
  hash?: Prisma.StringFilter<"ModelVersionImage"> | string
  type?: Prisma.StringFilter<"ModelVersionImage"> | string
  modelVersionId?: Prisma.IntFilter<"ModelVersionImage"> | number
  modelVersion?: Prisma.XOR<Prisma.ModelVersionScalarRelationFilter, Prisma.ModelVersionWhereInput>
}, "id">

export type ModelVersionImageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  url?: Prisma.SortOrder
  nsfwLevel?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  hash?: Prisma.SortOrder
  type?: Prisma.SortOrder
  modelVersionId?: Prisma.SortOrder
  _count?: Prisma.ModelVersionImageCountOrderByAggregateInput
  _avg?: Prisma.ModelVersionImageAvgOrderByAggregateInput
  _max?: Prisma.ModelVersionImageMaxOrderByAggregateInput
  _min?: Prisma.ModelVersionImageMinOrderByAggregateInput
  _sum?: Prisma.ModelVersionImageSumOrderByAggregateInput
}

export type ModelVersionImageScalarWhereWithAggregatesInput = {
  AND?: Prisma.ModelVersionImageScalarWhereWithAggregatesInput | Prisma.ModelVersionImageScalarWhereWithAggregatesInput[]
  OR?: Prisma.ModelVersionImageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ModelVersionImageScalarWhereWithAggregatesInput | Prisma.ModelVersionImageScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ModelVersionImage"> | number
  url?: Prisma.StringWithAggregatesFilter<"ModelVersionImage"> | string
  nsfwLevel?: Prisma.IntWithAggregatesFilter<"ModelVersionImage"> | number
  width?: Prisma.IntWithAggregatesFilter<"ModelVersionImage"> | number
  height?: Prisma.IntWithAggregatesFilter<"ModelVersionImage"> | number
  hash?: Prisma.StringWithAggregatesFilter<"ModelVersionImage"> | string
  type?: Prisma.StringWithAggregatesFilter<"ModelVersionImage"> | string
  modelVersionId?: Prisma.IntWithAggregatesFilter<"ModelVersionImage"> | number
}

export type ModelVersionImageCreateInput = {
  id: number
  url: string
  nsfwLevel: number
  width: number
  height: number
  hash: string
  type: string
  modelVersion: Prisma.ModelVersionCreateNestedOneWithoutImagesInput
}

export type ModelVersionImageUncheckedCreateInput = {
  id: number
  url: string
  nsfwLevel: number
  width: number
  height: number
  hash: string
  type: string
  modelVersionId: number
}

export type ModelVersionImageUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
  nsfwLevel?: Prisma.IntFieldUpdateOperationsInput | number
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  modelVersion?: Prisma.ModelVersionUpdateOneRequiredWithoutImagesNestedInput
}

export type ModelVersionImageUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
  nsfwLevel?: Prisma.IntFieldUpdateOperationsInput | number
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  modelVersionId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ModelVersionImageCreateManyInput = {
  id: number
  url: string
  nsfwLevel: number
  width: number
  height: number
  hash: string
  type: string
  modelVersionId: number
}

export type ModelVersionImageUpdateManyMutationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
  nsfwLevel?: Prisma.IntFieldUpdateOperationsInput | number
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ModelVersionImageUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
  nsfwLevel?: Prisma.IntFieldUpdateOperationsInput | number
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  modelVersionId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ModelVersionImageListRelationFilter = {
  every?: Prisma.ModelVersionImageWhereInput
  some?: Prisma.ModelVersionImageWhereInput
  none?: Prisma.ModelVersionImageWhereInput
}

export type ModelVersionImageOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ModelVersionImageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  url?: Prisma.SortOrder
  nsfwLevel?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  hash?: Prisma.SortOrder
  type?: Prisma.SortOrder
  modelVersionId?: Prisma.SortOrder
}

export type ModelVersionImageAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nsfwLevel?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  modelVersionId?: Prisma.SortOrder
}

export type ModelVersionImageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  url?: Prisma.SortOrder
  nsfwLevel?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  hash?: Prisma.SortOrder
  type?: Prisma.SortOrder
  modelVersionId?: Prisma.SortOrder
}

export type ModelVersionImageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  url?: Prisma.SortOrder
  nsfwLevel?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  hash?: Prisma.SortOrder
  type?: Prisma.SortOrder
  modelVersionId?: Prisma.SortOrder
}

export type ModelVersionImageSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nsfwLevel?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  modelVersionId?: Prisma.SortOrder
}

export type ModelVersionImageCreateNestedManyWithoutModelVersionInput = {
  create?: Prisma.XOR<Prisma.ModelVersionImageCreateWithoutModelVersionInput, Prisma.ModelVersionImageUncheckedCreateWithoutModelVersionInput> | Prisma.ModelVersionImageCreateWithoutModelVersionInput[] | Prisma.ModelVersionImageUncheckedCreateWithoutModelVersionInput[]
  connectOrCreate?: Prisma.ModelVersionImageCreateOrConnectWithoutModelVersionInput | Prisma.ModelVersionImageCreateOrConnectWithoutModelVersionInput[]
  createMany?: Prisma.ModelVersionImageCreateManyModelVersionInputEnvelope
  connect?: Prisma.ModelVersionImageWhereUniqueInput | Prisma.ModelVersionImageWhereUniqueInput[]
}

export type ModelVersionImageUncheckedCreateNestedManyWithoutModelVersionInput = {
  create?: Prisma.XOR<Prisma.ModelVersionImageCreateWithoutModelVersionInput, Prisma.ModelVersionImageUncheckedCreateWithoutModelVersionInput> | Prisma.ModelVersionImageCreateWithoutModelVersionInput[] | Prisma.ModelVersionImageUncheckedCreateWithoutModelVersionInput[]
  connectOrCreate?: Prisma.ModelVersionImageCreateOrConnectWithoutModelVersionInput | Prisma.ModelVersionImageCreateOrConnectWithoutModelVersionInput[]
  createMany?: Prisma.ModelVersionImageCreateManyModelVersionInputEnvelope
  connect?: Prisma.ModelVersionImageWhereUniqueInput | Prisma.ModelVersionImageWhereUniqueInput[]
}

export type ModelVersionImageUpdateManyWithoutModelVersionNestedInput = {
  create?: Prisma.XOR<Prisma.ModelVersionImageCreateWithoutModelVersionInput, Prisma.ModelVersionImageUncheckedCreateWithoutModelVersionInput> | Prisma.ModelVersionImageCreateWithoutModelVersionInput[] | Prisma.ModelVersionImageUncheckedCreateWithoutModelVersionInput[]
  connectOrCreate?: Prisma.ModelVersionImageCreateOrConnectWithoutModelVersionInput | Prisma.ModelVersionImageCreateOrConnectWithoutModelVersionInput[]
  upsert?: Prisma.ModelVersionImageUpsertWithWhereUniqueWithoutModelVersionInput | Prisma.ModelVersionImageUpsertWithWhereUniqueWithoutModelVersionInput[]
  createMany?: Prisma.ModelVersionImageCreateManyModelVersionInputEnvelope
  set?: Prisma.ModelVersionImageWhereUniqueInput | Prisma.ModelVersionImageWhereUniqueInput[]
  disconnect?: Prisma.ModelVersionImageWhereUniqueInput | Prisma.ModelVersionImageWhereUniqueInput[]
  delete?: Prisma.ModelVersionImageWhereUniqueInput | Prisma.ModelVersionImageWhereUniqueInput[]
  connect?: Prisma.ModelVersionImageWhereUniqueInput | Prisma.ModelVersionImageWhereUniqueInput[]
  update?: Prisma.ModelVersionImageUpdateWithWhereUniqueWithoutModelVersionInput | Prisma.ModelVersionImageUpdateWithWhereUniqueWithoutModelVersionInput[]
  updateMany?: Prisma.ModelVersionImageUpdateManyWithWhereWithoutModelVersionInput | Prisma.ModelVersionImageUpdateManyWithWhereWithoutModelVersionInput[]
  deleteMany?: Prisma.ModelVersionImageScalarWhereInput | Prisma.ModelVersionImageScalarWhereInput[]
}

export type ModelVersionImageUncheckedUpdateManyWithoutModelVersionNestedInput = {
  create?: Prisma.XOR<Prisma.ModelVersionImageCreateWithoutModelVersionInput, Prisma.ModelVersionImageUncheckedCreateWithoutModelVersionInput> | Prisma.ModelVersionImageCreateWithoutModelVersionInput[] | Prisma.ModelVersionImageUncheckedCreateWithoutModelVersionInput[]
  connectOrCreate?: Prisma.ModelVersionImageCreateOrConnectWithoutModelVersionInput | Prisma.ModelVersionImageCreateOrConnectWithoutModelVersionInput[]
  upsert?: Prisma.ModelVersionImageUpsertWithWhereUniqueWithoutModelVersionInput | Prisma.ModelVersionImageUpsertWithWhereUniqueWithoutModelVersionInput[]
  createMany?: Prisma.ModelVersionImageCreateManyModelVersionInputEnvelope
  set?: Prisma.ModelVersionImageWhereUniqueInput | Prisma.ModelVersionImageWhereUniqueInput[]
  disconnect?: Prisma.ModelVersionImageWhereUniqueInput | Prisma.ModelVersionImageWhereUniqueInput[]
  delete?: Prisma.ModelVersionImageWhereUniqueInput | Prisma.ModelVersionImageWhereUniqueInput[]
  connect?: Prisma.ModelVersionImageWhereUniqueInput | Prisma.ModelVersionImageWhereUniqueInput[]
  update?: Prisma.ModelVersionImageUpdateWithWhereUniqueWithoutModelVersionInput | Prisma.ModelVersionImageUpdateWithWhereUniqueWithoutModelVersionInput[]
  updateMany?: Prisma.ModelVersionImageUpdateManyWithWhereWithoutModelVersionInput | Prisma.ModelVersionImageUpdateManyWithWhereWithoutModelVersionInput[]
  deleteMany?: Prisma.ModelVersionImageScalarWhereInput | Prisma.ModelVersionImageScalarWhereInput[]
}

export type ModelVersionImageCreateWithoutModelVersionInput = {
  id: number
  url: string
  nsfwLevel: number
  width: number
  height: number
  hash: string
  type: string
}

export type ModelVersionImageUncheckedCreateWithoutModelVersionInput = {
  id: number
  url: string
  nsfwLevel: number
  width: number
  height: number
  hash: string
  type: string
}

export type ModelVersionImageCreateOrConnectWithoutModelVersionInput = {
  where: Prisma.ModelVersionImageWhereUniqueInput
  create: Prisma.XOR<Prisma.ModelVersionImageCreateWithoutModelVersionInput, Prisma.ModelVersionImageUncheckedCreateWithoutModelVersionInput>
}

export type ModelVersionImageCreateManyModelVersionInputEnvelope = {
  data: Prisma.ModelVersionImageCreateManyModelVersionInput | Prisma.ModelVersionImageCreateManyModelVersionInput[]
}

export type ModelVersionImageUpsertWithWhereUniqueWithoutModelVersionInput = {
  where: Prisma.ModelVersionImageWhereUniqueInput
  update: Prisma.XOR<Prisma.ModelVersionImageUpdateWithoutModelVersionInput, Prisma.ModelVersionImageUncheckedUpdateWithoutModelVersionInput>
  create: Prisma.XOR<Prisma.ModelVersionImageCreateWithoutModelVersionInput, Prisma.ModelVersionImageUncheckedCreateWithoutModelVersionInput>
}

export type ModelVersionImageUpdateWithWhereUniqueWithoutModelVersionInput = {
  where: Prisma.ModelVersionImageWhereUniqueInput
  data: Prisma.XOR<Prisma.ModelVersionImageUpdateWithoutModelVersionInput, Prisma.ModelVersionImageUncheckedUpdateWithoutModelVersionInput>
}

export type ModelVersionImageUpdateManyWithWhereWithoutModelVersionInput = {
  where: Prisma.ModelVersionImageScalarWhereInput
  data: Prisma.XOR<Prisma.ModelVersionImageUpdateManyMutationInput, Prisma.ModelVersionImageUncheckedUpdateManyWithoutModelVersionInput>
}

export type ModelVersionImageScalarWhereInput = {
  AND?: Prisma.ModelVersionImageScalarWhereInput | Prisma.ModelVersionImageScalarWhereInput[]
  OR?: Prisma.ModelVersionImageScalarWhereInput[]
  NOT?: Prisma.ModelVersionImageScalarWhereInput | Prisma.ModelVersionImageScalarWhereInput[]
  id?: Prisma.IntFilter<"ModelVersionImage"> | number
  url?: Prisma.StringFilter<"ModelVersionImage"> | string
  nsfwLevel?: Prisma.IntFilter<"ModelVersionImage"> | number
  width?: Prisma.IntFilter<"ModelVersionImage"> | number
  height?: Prisma.IntFilter<"ModelVersionImage"> | number
  hash?: Prisma.StringFilter<"ModelVersionImage"> | string
  type?: Prisma.StringFilter<"ModelVersionImage"> | string
  modelVersionId?: Prisma.IntFilter<"ModelVersionImage"> | number
}

export type ModelVersionImageCreateManyModelVersionInput = {
  id: number
  url: string
  nsfwLevel: number
  width: number
  height: number
  hash: string
  type: string
}

export type ModelVersionImageUpdateWithoutModelVersionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
  nsfwLevel?: Prisma.IntFieldUpdateOperationsInput | number
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ModelVersionImageUncheckedUpdateWithoutModelVersionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
  nsfwLevel?: Prisma.IntFieldUpdateOperationsInput | number
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ModelVersionImageUncheckedUpdateManyWithoutModelVersionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  url?: Prisma.StringFieldUpdateOperationsInput | string
  nsfwLevel?: Prisma.IntFieldUpdateOperationsInput | number
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
}



export type ModelVersionImageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  url?: boolean
  nsfwLevel?: boolean
  width?: boolean
  height?: boolean
  hash?: boolean
  type?: boolean
  modelVersionId?: boolean
  modelVersion?: boolean | Prisma.ModelVersionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["modelVersionImage"]>

export type ModelVersionImageSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  url?: boolean
  nsfwLevel?: boolean
  width?: boolean
  height?: boolean
  hash?: boolean
  type?: boolean
  modelVersionId?: boolean
  modelVersion?: boolean | Prisma.ModelVersionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["modelVersionImage"]>

export type ModelVersionImageSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  url?: boolean
  nsfwLevel?: boolean
  width?: boolean
  height?: boolean
  hash?: boolean
  type?: boolean
  modelVersionId?: boolean
  modelVersion?: boolean | Prisma.ModelVersionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["modelVersionImage"]>

export type ModelVersionImageSelectScalar = {
  id?: boolean
  url?: boolean
  nsfwLevel?: boolean
  width?: boolean
  height?: boolean
  hash?: boolean
  type?: boolean
  modelVersionId?: boolean
}

export type ModelVersionImageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "url" | "nsfwLevel" | "width" | "height" | "hash" | "type" | "modelVersionId", ExtArgs["result"]["modelVersionImage"]>
export type ModelVersionImageInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  modelVersion?: boolean | Prisma.ModelVersionDefaultArgs<ExtArgs>
}
export type ModelVersionImageIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  modelVersion?: boolean | Prisma.ModelVersionDefaultArgs<ExtArgs>
}
export type ModelVersionImageIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  modelVersion?: boolean | Prisma.ModelVersionDefaultArgs<ExtArgs>
}

export type $ModelVersionImagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ModelVersionImage"
  objects: {
    modelVersion: Prisma.$ModelVersionPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    url: string
    nsfwLevel: number
    width: number
    height: number
    hash: string
    type: string
    modelVersionId: number
  }, ExtArgs["result"]["modelVersionImage"]>
  composites: {}
}

export type ModelVersionImageGetPayload<S extends boolean | null | undefined | ModelVersionImageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ModelVersionImagePayload, S>

export type ModelVersionImageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ModelVersionImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ModelVersionImageCountAggregateInputType | true
  }

export interface ModelVersionImageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ModelVersionImage'], meta: { name: 'ModelVersionImage' } }
  /**
   * Find zero or one ModelVersionImage that matches the filter.
   * @param {ModelVersionImageFindUniqueArgs} args - Arguments to find a ModelVersionImage
   * @example
   * // Get one ModelVersionImage
   * const modelVersionImage = await prisma.modelVersionImage.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ModelVersionImageFindUniqueArgs>(args: Prisma.SelectSubset<T, ModelVersionImageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ModelVersionImageClient<runtime.Types.Result.GetResult<Prisma.$ModelVersionImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ModelVersionImage that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ModelVersionImageFindUniqueOrThrowArgs} args - Arguments to find a ModelVersionImage
   * @example
   * // Get one ModelVersionImage
   * const modelVersionImage = await prisma.modelVersionImage.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ModelVersionImageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ModelVersionImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ModelVersionImageClient<runtime.Types.Result.GetResult<Prisma.$ModelVersionImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ModelVersionImage that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelVersionImageFindFirstArgs} args - Arguments to find a ModelVersionImage
   * @example
   * // Get one ModelVersionImage
   * const modelVersionImage = await prisma.modelVersionImage.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ModelVersionImageFindFirstArgs>(args?: Prisma.SelectSubset<T, ModelVersionImageFindFirstArgs<ExtArgs>>): Prisma.Prisma__ModelVersionImageClient<runtime.Types.Result.GetResult<Prisma.$ModelVersionImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ModelVersionImage that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelVersionImageFindFirstOrThrowArgs} args - Arguments to find a ModelVersionImage
   * @example
   * // Get one ModelVersionImage
   * const modelVersionImage = await prisma.modelVersionImage.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ModelVersionImageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ModelVersionImageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ModelVersionImageClient<runtime.Types.Result.GetResult<Prisma.$ModelVersionImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ModelVersionImages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelVersionImageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ModelVersionImages
   * const modelVersionImages = await prisma.modelVersionImage.findMany()
   * 
   * // Get first 10 ModelVersionImages
   * const modelVersionImages = await prisma.modelVersionImage.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const modelVersionImageWithIdOnly = await prisma.modelVersionImage.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ModelVersionImageFindManyArgs>(args?: Prisma.SelectSubset<T, ModelVersionImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ModelVersionImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ModelVersionImage.
   * @param {ModelVersionImageCreateArgs} args - Arguments to create a ModelVersionImage.
   * @example
   * // Create one ModelVersionImage
   * const ModelVersionImage = await prisma.modelVersionImage.create({
   *   data: {
   *     // ... data to create a ModelVersionImage
   *   }
   * })
   * 
   */
  create<T extends ModelVersionImageCreateArgs>(args: Prisma.SelectSubset<T, ModelVersionImageCreateArgs<ExtArgs>>): Prisma.Prisma__ModelVersionImageClient<runtime.Types.Result.GetResult<Prisma.$ModelVersionImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ModelVersionImages.
   * @param {ModelVersionImageCreateManyArgs} args - Arguments to create many ModelVersionImages.
   * @example
   * // Create many ModelVersionImages
   * const modelVersionImage = await prisma.modelVersionImage.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ModelVersionImageCreateManyArgs>(args?: Prisma.SelectSubset<T, ModelVersionImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ModelVersionImages and returns the data saved in the database.
   * @param {ModelVersionImageCreateManyAndReturnArgs} args - Arguments to create many ModelVersionImages.
   * @example
   * // Create many ModelVersionImages
   * const modelVersionImage = await prisma.modelVersionImage.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ModelVersionImages and only return the `id`
   * const modelVersionImageWithIdOnly = await prisma.modelVersionImage.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ModelVersionImageCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ModelVersionImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ModelVersionImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ModelVersionImage.
   * @param {ModelVersionImageDeleteArgs} args - Arguments to delete one ModelVersionImage.
   * @example
   * // Delete one ModelVersionImage
   * const ModelVersionImage = await prisma.modelVersionImage.delete({
   *   where: {
   *     // ... filter to delete one ModelVersionImage
   *   }
   * })
   * 
   */
  delete<T extends ModelVersionImageDeleteArgs>(args: Prisma.SelectSubset<T, ModelVersionImageDeleteArgs<ExtArgs>>): Prisma.Prisma__ModelVersionImageClient<runtime.Types.Result.GetResult<Prisma.$ModelVersionImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ModelVersionImage.
   * @param {ModelVersionImageUpdateArgs} args - Arguments to update one ModelVersionImage.
   * @example
   * // Update one ModelVersionImage
   * const modelVersionImage = await prisma.modelVersionImage.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ModelVersionImageUpdateArgs>(args: Prisma.SelectSubset<T, ModelVersionImageUpdateArgs<ExtArgs>>): Prisma.Prisma__ModelVersionImageClient<runtime.Types.Result.GetResult<Prisma.$ModelVersionImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ModelVersionImages.
   * @param {ModelVersionImageDeleteManyArgs} args - Arguments to filter ModelVersionImages to delete.
   * @example
   * // Delete a few ModelVersionImages
   * const { count } = await prisma.modelVersionImage.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ModelVersionImageDeleteManyArgs>(args?: Prisma.SelectSubset<T, ModelVersionImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ModelVersionImages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelVersionImageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ModelVersionImages
   * const modelVersionImage = await prisma.modelVersionImage.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ModelVersionImageUpdateManyArgs>(args: Prisma.SelectSubset<T, ModelVersionImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ModelVersionImages and returns the data updated in the database.
   * @param {ModelVersionImageUpdateManyAndReturnArgs} args - Arguments to update many ModelVersionImages.
   * @example
   * // Update many ModelVersionImages
   * const modelVersionImage = await prisma.modelVersionImage.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ModelVersionImages and only return the `id`
   * const modelVersionImageWithIdOnly = await prisma.modelVersionImage.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ModelVersionImageUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ModelVersionImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ModelVersionImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ModelVersionImage.
   * @param {ModelVersionImageUpsertArgs} args - Arguments to update or create a ModelVersionImage.
   * @example
   * // Update or create a ModelVersionImage
   * const modelVersionImage = await prisma.modelVersionImage.upsert({
   *   create: {
   *     // ... data to create a ModelVersionImage
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ModelVersionImage we want to update
   *   }
   * })
   */
  upsert<T extends ModelVersionImageUpsertArgs>(args: Prisma.SelectSubset<T, ModelVersionImageUpsertArgs<ExtArgs>>): Prisma.Prisma__ModelVersionImageClient<runtime.Types.Result.GetResult<Prisma.$ModelVersionImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ModelVersionImages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelVersionImageCountArgs} args - Arguments to filter ModelVersionImages to count.
   * @example
   * // Count the number of ModelVersionImages
   * const count = await prisma.modelVersionImage.count({
   *   where: {
   *     // ... the filter for the ModelVersionImages we want to count
   *   }
   * })
  **/
  count<T extends ModelVersionImageCountArgs>(
    args?: Prisma.Subset<T, ModelVersionImageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ModelVersionImageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ModelVersionImage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelVersionImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ModelVersionImageAggregateArgs>(args: Prisma.Subset<T, ModelVersionImageAggregateArgs>): Prisma.PrismaPromise<GetModelVersionImageAggregateType<T>>

  /**
   * Group by ModelVersionImage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModelVersionImageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ModelVersionImageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ModelVersionImageGroupByArgs['orderBy'] }
      : { orderBy?: ModelVersionImageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ModelVersionImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetModelVersionImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ModelVersionImage model
 */
readonly fields: ModelVersionImageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ModelVersionImage.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ModelVersionImageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  modelVersion<T extends Prisma.ModelVersionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ModelVersionDefaultArgs<ExtArgs>>): Prisma.Prisma__ModelVersionClient<runtime.Types.Result.GetResult<Prisma.$ModelVersionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ModelVersionImage model
 */
export interface ModelVersionImageFieldRefs {
  readonly id: Prisma.FieldRef<"ModelVersionImage", 'Int'>
  readonly url: Prisma.FieldRef<"ModelVersionImage", 'String'>
  readonly nsfwLevel: Prisma.FieldRef<"ModelVersionImage", 'Int'>
  readonly width: Prisma.FieldRef<"ModelVersionImage", 'Int'>
  readonly height: Prisma.FieldRef<"ModelVersionImage", 'Int'>
  readonly hash: Prisma.FieldRef<"ModelVersionImage", 'String'>
  readonly type: Prisma.FieldRef<"ModelVersionImage", 'String'>
  readonly modelVersionId: Prisma.FieldRef<"ModelVersionImage", 'Int'>
}
    

// Custom InputTypes
/**
 * ModelVersionImage findUnique
 */
export type ModelVersionImageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionImage
   */
  select?: Prisma.ModelVersionImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionImage
   */
  omit?: Prisma.ModelVersionImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionImageInclude<ExtArgs> | null
  /**
   * Filter, which ModelVersionImage to fetch.
   */
  where: Prisma.ModelVersionImageWhereUniqueInput
}

/**
 * ModelVersionImage findUniqueOrThrow
 */
export type ModelVersionImageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionImage
   */
  select?: Prisma.ModelVersionImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionImage
   */
  omit?: Prisma.ModelVersionImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionImageInclude<ExtArgs> | null
  /**
   * Filter, which ModelVersionImage to fetch.
   */
  where: Prisma.ModelVersionImageWhereUniqueInput
}

/**
 * ModelVersionImage findFirst
 */
export type ModelVersionImageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionImage
   */
  select?: Prisma.ModelVersionImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionImage
   */
  omit?: Prisma.ModelVersionImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionImageInclude<ExtArgs> | null
  /**
   * Filter, which ModelVersionImage to fetch.
   */
  where?: Prisma.ModelVersionImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ModelVersionImages to fetch.
   */
  orderBy?: Prisma.ModelVersionImageOrderByWithRelationInput | Prisma.ModelVersionImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ModelVersionImages.
   */
  cursor?: Prisma.ModelVersionImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ModelVersionImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ModelVersionImages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ModelVersionImages.
   */
  distinct?: Prisma.ModelVersionImageScalarFieldEnum | Prisma.ModelVersionImageScalarFieldEnum[]
}

/**
 * ModelVersionImage findFirstOrThrow
 */
export type ModelVersionImageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionImage
   */
  select?: Prisma.ModelVersionImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionImage
   */
  omit?: Prisma.ModelVersionImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionImageInclude<ExtArgs> | null
  /**
   * Filter, which ModelVersionImage to fetch.
   */
  where?: Prisma.ModelVersionImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ModelVersionImages to fetch.
   */
  orderBy?: Prisma.ModelVersionImageOrderByWithRelationInput | Prisma.ModelVersionImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ModelVersionImages.
   */
  cursor?: Prisma.ModelVersionImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ModelVersionImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ModelVersionImages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ModelVersionImages.
   */
  distinct?: Prisma.ModelVersionImageScalarFieldEnum | Prisma.ModelVersionImageScalarFieldEnum[]
}

/**
 * ModelVersionImage findMany
 */
export type ModelVersionImageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionImage
   */
  select?: Prisma.ModelVersionImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionImage
   */
  omit?: Prisma.ModelVersionImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionImageInclude<ExtArgs> | null
  /**
   * Filter, which ModelVersionImages to fetch.
   */
  where?: Prisma.ModelVersionImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ModelVersionImages to fetch.
   */
  orderBy?: Prisma.ModelVersionImageOrderByWithRelationInput | Prisma.ModelVersionImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ModelVersionImages.
   */
  cursor?: Prisma.ModelVersionImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ModelVersionImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ModelVersionImages.
   */
  skip?: number
  distinct?: Prisma.ModelVersionImageScalarFieldEnum | Prisma.ModelVersionImageScalarFieldEnum[]
}

/**
 * ModelVersionImage create
 */
export type ModelVersionImageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionImage
   */
  select?: Prisma.ModelVersionImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionImage
   */
  omit?: Prisma.ModelVersionImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionImageInclude<ExtArgs> | null
  /**
   * The data needed to create a ModelVersionImage.
   */
  data: Prisma.XOR<Prisma.ModelVersionImageCreateInput, Prisma.ModelVersionImageUncheckedCreateInput>
}

/**
 * ModelVersionImage createMany
 */
export type ModelVersionImageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ModelVersionImages.
   */
  data: Prisma.ModelVersionImageCreateManyInput | Prisma.ModelVersionImageCreateManyInput[]
}

/**
 * ModelVersionImage createManyAndReturn
 */
export type ModelVersionImageCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionImage
   */
  select?: Prisma.ModelVersionImageSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionImage
   */
  omit?: Prisma.ModelVersionImageOmit<ExtArgs> | null
  /**
   * The data used to create many ModelVersionImages.
   */
  data: Prisma.ModelVersionImageCreateManyInput | Prisma.ModelVersionImageCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionImageIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ModelVersionImage update
 */
export type ModelVersionImageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionImage
   */
  select?: Prisma.ModelVersionImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionImage
   */
  omit?: Prisma.ModelVersionImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionImageInclude<ExtArgs> | null
  /**
   * The data needed to update a ModelVersionImage.
   */
  data: Prisma.XOR<Prisma.ModelVersionImageUpdateInput, Prisma.ModelVersionImageUncheckedUpdateInput>
  /**
   * Choose, which ModelVersionImage to update.
   */
  where: Prisma.ModelVersionImageWhereUniqueInput
}

/**
 * ModelVersionImage updateMany
 */
export type ModelVersionImageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ModelVersionImages.
   */
  data: Prisma.XOR<Prisma.ModelVersionImageUpdateManyMutationInput, Prisma.ModelVersionImageUncheckedUpdateManyInput>
  /**
   * Filter which ModelVersionImages to update
   */
  where?: Prisma.ModelVersionImageWhereInput
  /**
   * Limit how many ModelVersionImages to update.
   */
  limit?: number
}

/**
 * ModelVersionImage updateManyAndReturn
 */
export type ModelVersionImageUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionImage
   */
  select?: Prisma.ModelVersionImageSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionImage
   */
  omit?: Prisma.ModelVersionImageOmit<ExtArgs> | null
  /**
   * The data used to update ModelVersionImages.
   */
  data: Prisma.XOR<Prisma.ModelVersionImageUpdateManyMutationInput, Prisma.ModelVersionImageUncheckedUpdateManyInput>
  /**
   * Filter which ModelVersionImages to update
   */
  where?: Prisma.ModelVersionImageWhereInput
  /**
   * Limit how many ModelVersionImages to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionImageIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ModelVersionImage upsert
 */
export type ModelVersionImageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionImage
   */
  select?: Prisma.ModelVersionImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionImage
   */
  omit?: Prisma.ModelVersionImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionImageInclude<ExtArgs> | null
  /**
   * The filter to search for the ModelVersionImage to update in case it exists.
   */
  where: Prisma.ModelVersionImageWhereUniqueInput
  /**
   * In case the ModelVersionImage found by the `where` argument doesn't exist, create a new ModelVersionImage with this data.
   */
  create: Prisma.XOR<Prisma.ModelVersionImageCreateInput, Prisma.ModelVersionImageUncheckedCreateInput>
  /**
   * In case the ModelVersionImage was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ModelVersionImageUpdateInput, Prisma.ModelVersionImageUncheckedUpdateInput>
}

/**
 * ModelVersionImage delete
 */
export type ModelVersionImageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionImage
   */
  select?: Prisma.ModelVersionImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionImage
   */
  omit?: Prisma.ModelVersionImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionImageInclude<ExtArgs> | null
  /**
   * Filter which ModelVersionImage to delete.
   */
  where: Prisma.ModelVersionImageWhereUniqueInput
}

/**
 * ModelVersionImage deleteMany
 */
export type ModelVersionImageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ModelVersionImages to delete
   */
  where?: Prisma.ModelVersionImageWhereInput
  /**
   * Limit how many ModelVersionImages to delete.
   */
  limit?: number
}

/**
 * ModelVersionImage without action
 */
export type ModelVersionImageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ModelVersionImage
   */
  select?: Prisma.ModelVersionImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ModelVersionImage
   */
  omit?: Prisma.ModelVersionImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelVersionImageInclude<ExtArgs> | null
}
